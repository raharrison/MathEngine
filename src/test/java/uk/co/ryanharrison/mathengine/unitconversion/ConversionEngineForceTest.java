package uk.co.ryanharrison.mathengine.unitconversion;

import org.junit.Test;
import uk.co.ryanharrison.mathengine.unitconversion.units.Conversion;

import static org.junit.Assert.assertEquals;

public class ConversionEngineForceTest extends ConversionEngineTest {

    @Test
    public void testForces() {
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "attonewton", "attonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "centinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "decigram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "decinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "dekagram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "dekanewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "exanewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "attonewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "giganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "gram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "hectonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "joule/meter", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "kilogram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "kilonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "kilopond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "meganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "megapond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "micronewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "millinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "nanonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "newton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "petanewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "attonewton", "piconewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "pond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "pound force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "poundal", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "teranewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "ton force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "attonewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "yottanewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "attonewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "attonewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E16, engine.convertAsDouble(AMOUNT, "centinewton", "attonewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "centinewton", "centinewton", PLACES), 0.0);
        assertEquals(29.1638837, engine.convertAsDouble(AMOUNT, "centinewton", "decigram force", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "centinewton", "decinewton", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "centinewton", "dekagram force", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "centinewton", "dekanewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "centinewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "centinewton", "exanewton", PLACES), 0.0);
        assertEquals(2.86E13, engine.convertAsDouble(AMOUNT, "centinewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "centinewton", "giganewton", PLACES), 0.0);
        assertEquals(2.9163884, engine.convertAsDouble(AMOUNT, "centinewton", "gram force", PLACES), 0.0);
        assertEquals(0.000286, engine.convertAsDouble(AMOUNT, "centinewton", "hectonewton", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "centinewton", "joule/meter", PLACES), 0.0);
        assertEquals(0.0029164, engine.convertAsDouble(AMOUNT, "centinewton", "kilogram force", PLACES), 0.0);
        assertEquals(2.86e-05, engine.convertAsDouble(AMOUNT, "centinewton", "kilonewton", PLACES), 0.0);
        assertEquals(0.0029164, engine.convertAsDouble(AMOUNT, "centinewton", "kilopond", PLACES), 0.0);
        assertEquals(6.4e-06, engine.convertAsDouble(AMOUNT, "centinewton", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "centinewton", "meganewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "centinewton", "megapond", PLACES), 0.0);
        assertEquals(28600.0, engine.convertAsDouble(AMOUNT, "centinewton", "micronewton", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "centinewton", "millinewton", PLACES), 0.0);
        assertEquals(28600000.0, engine.convertAsDouble(AMOUNT, "centinewton", "nanonewton", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "centinewton", "newton", PLACES), 0.0);
        assertEquals(0.1028726, engine.convertAsDouble(AMOUNT, "centinewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "centinewton", "petanewton", PLACES), 0.0);
        assertEquals(28600000000.0, engine.convertAsDouble(AMOUNT, "centinewton", "piconewton", PLACES), 0.0);
        assertEquals(2.9163884, engine.convertAsDouble(AMOUNT, "centinewton", "pond", PLACES), 0.0);
        assertEquals(0.0064295, engine.convertAsDouble(AMOUNT, "centinewton", "pound force", PLACES), 0.0);
        assertEquals(0.2068642, engine.convertAsDouble(AMOUNT, "centinewton", "poundal", PLACES), 0.0);
        assertEquals(2.86e-05, engine.convertAsDouble(AMOUNT, "centinewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "centinewton", "teranewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "centinewton", "ton force (long)", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "centinewton", "ton force", PLACES), 0.0);
        assertEquals(3.2e-06, engine.convertAsDouble(AMOUNT, "centinewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86e+22, engine.convertAsDouble(AMOUNT, "centinewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "centinewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.8600000000000004E19, engine.convertAsDouble(AMOUNT, "centinewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "centinewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.8047018999999995E15, engine.convertAsDouble(AMOUNT, "decigram force", "attonewton", PLACES), 0.0);
        assertEquals(0.2804702, engine.convertAsDouble(AMOUNT, "decigram force", "centinewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "decigram force", "decigram force", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "decigram force", "decinewton", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "decigram force", "dekagram force", PLACES), 0.0);
        assertEquals(0.0002805, engine.convertAsDouble(AMOUNT, "decigram force", "dekanewton", PLACES), 0.0);
        assertEquals(280.47019, engine.convertAsDouble(AMOUNT, "decigram force", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decigram force", "exanewton", PLACES), 0.0);
        assertEquals(2.8047018999999995E12, engine.convertAsDouble(AMOUNT, "decigram force", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decigram force", "giganewton", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "decigram force", "gram force", PLACES), 0.0);
        assertEquals(2.8e-05, engine.convertAsDouble(AMOUNT, "decigram force", "hectonewton", PLACES), 0.0);
        assertEquals(0.0028047, engine.convertAsDouble(AMOUNT, "decigram force", "joule/meter", PLACES), 0.0);
        assertEquals(0.000286, engine.convertAsDouble(AMOUNT, "decigram force", "kilogram force", PLACES), 0.0);
        assertEquals(2.8e-06, engine.convertAsDouble(AMOUNT, "decigram force", "kilonewton", PLACES), 0.0);
        assertEquals(0.000286, engine.convertAsDouble(AMOUNT, "decigram force", "kilopond", PLACES), 0.0);
        assertEquals(6e-07, engine.convertAsDouble(AMOUNT, "decigram force", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decigram force", "meganewton", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "decigram force", "megapond", PLACES), 0.0);
        assertEquals(2804.7019, engine.convertAsDouble(AMOUNT, "decigram force", "micronewton", PLACES), 0.0);
        assertEquals(2.8047019, engine.convertAsDouble(AMOUNT, "decigram force", "millinewton", PLACES), 0.0);
        assertEquals(2804701.9, engine.convertAsDouble(AMOUNT, "decigram force", "nanonewton", PLACES), 0.0);
        assertEquals(0.0028047, engine.convertAsDouble(AMOUNT, "decigram force", "newton", PLACES), 0.0);
        assertEquals(0.0100884, engine.convertAsDouble(AMOUNT, "decigram force", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decigram force", "petanewton", PLACES), 0.0);
        assertEquals(2.8047018999999995E9, engine.convertAsDouble(AMOUNT, "decigram force", "piconewton", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "decigram force", "pond", PLACES), 0.0);
        assertEquals(0.0006305, engine.convertAsDouble(AMOUNT, "decigram force", "pound force", PLACES), 0.0);
        assertEquals(0.0202864, engine.convertAsDouble(AMOUNT, "decigram force", "poundal", PLACES), 0.0);
        assertEquals(2.8e-06, engine.convertAsDouble(AMOUNT, "decigram force", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decigram force", "teranewton", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "decigram force", "ton force (long)", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "decigram force", "ton force", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "decigram force", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8047019E21, engine.convertAsDouble(AMOUNT, "decigram force", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decigram force", "yottanewton", PLACES), 0.0);
        assertEquals(2.8047019E18, engine.convertAsDouble(AMOUNT, "decigram force", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decigram force", "zettanewton", PLACES), 0.0);
        assertEquals(2.8599999999999997e+17, engine.convertAsDouble(AMOUNT, "decinewton", "attonewton", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "decinewton", "centinewton", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "decinewton", "decigram force", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "decinewton", "decinewton", PLACES), 0.0);
        assertEquals(2.9163884, engine.convertAsDouble(AMOUNT, "decinewton", "dekagram force", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "decinewton", "dekanewton", PLACES), 0.0);
        assertEquals(28600.0, engine.convertAsDouble(AMOUNT, "decinewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decinewton", "exanewton", PLACES), 0.0);
        assertEquals(285999999999999.94, engine.convertAsDouble(AMOUNT, "decinewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decinewton", "giganewton", PLACES), 0.0);
        assertEquals(29.1638837, engine.convertAsDouble(AMOUNT, "decinewton", "gram force", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "decinewton", "hectonewton", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "decinewton", "joule/meter", PLACES), 0.0);
        assertEquals(0.0291639, engine.convertAsDouble(AMOUNT, "decinewton", "kilogram force", PLACES), 0.0);
        assertEquals(0.000286, engine.convertAsDouble(AMOUNT, "decinewton", "kilonewton", PLACES), 0.0);
        assertEquals(0.0291639, engine.convertAsDouble(AMOUNT, "decinewton", "kilopond", PLACES), 0.0);
        assertEquals(6.43e-05, engine.convertAsDouble(AMOUNT, "decinewton", "kip", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "decinewton", "meganewton", PLACES), 0.0);
        assertEquals(2.92e-05, engine.convertAsDouble(AMOUNT, "decinewton", "megapond", PLACES), 0.0);
        assertEquals(286000.0, engine.convertAsDouble(AMOUNT, "decinewton", "micronewton", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "decinewton", "millinewton", PLACES), 0.0);
        assertEquals(285999999.9999999, engine.convertAsDouble(AMOUNT, "decinewton", "nanonewton", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "decinewton", "newton", PLACES), 0.0);
        assertEquals(1.0287257, engine.convertAsDouble(AMOUNT, "decinewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decinewton", "petanewton", PLACES), 0.0);
        assertEquals(286000000000.0, engine.convertAsDouble(AMOUNT, "decinewton", "piconewton", PLACES), 0.0);
        assertEquals(29.1638837, engine.convertAsDouble(AMOUNT, "decinewton", "pond", PLACES), 0.0);
        assertEquals(0.0642954, engine.convertAsDouble(AMOUNT, "decinewton", "pound force", PLACES), 0.0);
        assertEquals(2.068642, engine.convertAsDouble(AMOUNT, "decinewton", "poundal", PLACES), 0.0);
        assertEquals(0.000286, engine.convertAsDouble(AMOUNT, "decinewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decinewton", "teranewton", PLACES), 0.0);
        assertEquals(2.87e-05, engine.convertAsDouble(AMOUNT, "decinewton", "ton force (long)", PLACES), 0.0);
        assertEquals(2.92e-05, engine.convertAsDouble(AMOUNT, "decinewton", "ton force", PLACES), 0.0);
        assertEquals(3.21e-05, engine.convertAsDouble(AMOUNT, "decinewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86E23, engine.convertAsDouble(AMOUNT, "decinewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decinewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.86e+20, engine.convertAsDouble(AMOUNT, "decinewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "decinewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.8047019E17, engine.convertAsDouble(AMOUNT, "dekagram force", "attonewton", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "dekagram force", "centinewton", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "dekagram force", "decigram force", PLACES), 0.0);
        assertEquals(2.8047019, engine.convertAsDouble(AMOUNT, "dekagram force", "decinewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "dekagram force", "dekagram force", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "dekagram force", "dekanewton", PLACES), 0.0);
        assertEquals(28047.019, engine.convertAsDouble(AMOUNT, "dekagram force", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekagram force", "exanewton", PLACES), 0.0);
        assertEquals(280470189999999.97, engine.convertAsDouble(AMOUNT, "dekagram force", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekagram force", "giganewton", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "dekagram force", "gram force", PLACES), 0.0);
        assertEquals(0.0028047, engine.convertAsDouble(AMOUNT, "dekagram force", "hectonewton", PLACES), 0.0);
        assertEquals(0.2804702, engine.convertAsDouble(AMOUNT, "dekagram force", "joule/meter", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "dekagram force", "kilogram force", PLACES), 0.0);
        assertEquals(0.0002805, engine.convertAsDouble(AMOUNT, "dekagram force", "kilonewton", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "dekagram force", "kilopond", PLACES), 0.0);
        assertEquals(6.31e-05, engine.convertAsDouble(AMOUNT, "dekagram force", "kip", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "dekagram force", "meganewton", PLACES), 0.0);
        assertEquals(2.86e-05, engine.convertAsDouble(AMOUNT, "dekagram force", "megapond", PLACES), 0.0);
        assertEquals(280470.19, engine.convertAsDouble(AMOUNT, "dekagram force", "micronewton", PLACES), 0.0);
        assertEquals(280.47019, engine.convertAsDouble(AMOUNT, "dekagram force", "millinewton", PLACES), 0.0);
        assertEquals(2.8047019E8, engine.convertAsDouble(AMOUNT, "dekagram force", "nanonewton", PLACES), 0.0);
        assertEquals(0.2804702, engine.convertAsDouble(AMOUNT, "dekagram force", "newton", PLACES), 0.0);
        assertEquals(1.0088353, engine.convertAsDouble(AMOUNT, "dekagram force", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekagram force", "petanewton", PLACES), 0.0);
        assertEquals(280470190000.0, engine.convertAsDouble(AMOUNT, "dekagram force", "piconewton", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "dekagram force", "pond", PLACES), 0.0);
        assertEquals(0.0630522, engine.convertAsDouble(AMOUNT, "dekagram force", "pound force", PLACES), 0.0);
        assertEquals(2.0286448, engine.convertAsDouble(AMOUNT, "dekagram force", "poundal", PLACES), 0.0);
        assertEquals(0.0002805, engine.convertAsDouble(AMOUNT, "dekagram force", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekagram force", "teranewton", PLACES), 0.0);
        assertEquals(2.81e-05, engine.convertAsDouble(AMOUNT, "dekagram force", "ton force (long)", PLACES), 0.0);
        assertEquals(2.86e-05, engine.convertAsDouble(AMOUNT, "dekagram force", "ton force", PLACES), 0.0);
        assertEquals(3.15e-05, engine.convertAsDouble(AMOUNT, "dekagram force", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8047019e+23, engine.convertAsDouble(AMOUNT, "dekagram force", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekagram force", "yottanewton", PLACES), 0.0);
        assertEquals(2.8047019000000004E20, engine.convertAsDouble(AMOUNT, "dekagram force", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekagram force", "zettanewton", PLACES), 0.0);
        assertEquals(2.8599999999999996e+19, engine.convertAsDouble(AMOUNT, "dekanewton", "attonewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "dekanewton", "centinewton", PLACES), 0.0);
        assertEquals(29163.8836912, engine.convertAsDouble(AMOUNT, "dekanewton", "decigram force", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "dekanewton", "decinewton", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "dekanewton", "dekagram force", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "dekanewton", "dekanewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "dekanewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekanewton", "exanewton", PLACES), 0.0);
        assertEquals(2.8599999999999996e+16, engine.convertAsDouble(AMOUNT, "dekanewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekanewton", "giganewton", PLACES), 0.0);
        assertEquals(2916.3883691, engine.convertAsDouble(AMOUNT, "dekanewton", "gram force", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "dekanewton", "hectonewton", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "dekanewton", "joule/meter", PLACES), 0.0);
        assertEquals(2.9163884, engine.convertAsDouble(AMOUNT, "dekanewton", "kilogram force", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "dekanewton", "kilonewton", PLACES), 0.0);
        assertEquals(2.9163884, engine.convertAsDouble(AMOUNT, "dekanewton", "kilopond", PLACES), 0.0);
        assertEquals(0.0064295, engine.convertAsDouble(AMOUNT, "dekanewton", "kip", PLACES), 0.0);
        assertEquals(2.86e-05, engine.convertAsDouble(AMOUNT, "dekanewton", "meganewton", PLACES), 0.0);
        assertEquals(0.0029164, engine.convertAsDouble(AMOUNT, "dekanewton", "megapond", PLACES), 0.0);
        assertEquals(28600000.0, engine.convertAsDouble(AMOUNT, "dekanewton", "micronewton", PLACES), 0.0);
        assertEquals(28600.0, engine.convertAsDouble(AMOUNT, "dekanewton", "millinewton", PLACES), 0.0);
        assertEquals(28599999999.999996, engine.convertAsDouble(AMOUNT, "dekanewton", "nanonewton", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "dekanewton", "newton", PLACES), 0.0);
        assertEquals(102.8725727, engine.convertAsDouble(AMOUNT, "dekanewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekanewton", "petanewton", PLACES), 0.0);
        assertEquals(28600000000000.0, engine.convertAsDouble(AMOUNT, "dekanewton", "piconewton", PLACES), 0.0);
        assertEquals(2916.3883691, engine.convertAsDouble(AMOUNT, "dekanewton", "pond", PLACES), 0.0);
        assertEquals(6.4295358, engine.convertAsDouble(AMOUNT, "dekanewton", "pound force", PLACES), 0.0);
        assertEquals(206.8642027, engine.convertAsDouble(AMOUNT, "dekanewton", "poundal", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "dekanewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekanewton", "teranewton", PLACES), 0.0);
        assertEquals(0.0028703, engine.convertAsDouble(AMOUNT, "dekanewton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0029164, engine.convertAsDouble(AMOUNT, "dekanewton", "ton force", PLACES), 0.0);
        assertEquals(0.0032148, engine.convertAsDouble(AMOUNT, "dekanewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8600000000000003E25, engine.convertAsDouble(AMOUNT, "dekanewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekanewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.86e+22, engine.convertAsDouble(AMOUNT, "dekanewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dekanewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E13, engine.convertAsDouble(AMOUNT, "dyne", "attonewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "dyne", "centinewton", PLACES), 0.0);
        assertEquals(0.0291639, engine.convertAsDouble(AMOUNT, "dyne", "decigram force", PLACES), 0.0);
        assertEquals(0.000286, engine.convertAsDouble(AMOUNT, "dyne", "decinewton", PLACES), 0.0);
        assertEquals(0.0002916, engine.convertAsDouble(AMOUNT, "dyne", "dekagram force", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "dyne", "dekanewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "dyne", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "exanewton", PLACES), 0.0);
        assertEquals(2.86E10, engine.convertAsDouble(AMOUNT, "dyne", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "giganewton", PLACES), 0.0);
        assertEquals(0.0029164, engine.convertAsDouble(AMOUNT, "dyne", "gram force", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "dyne", "hectonewton", PLACES), 0.0);
        assertEquals(2.86e-05, engine.convertAsDouble(AMOUNT, "dyne", "joule/meter", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "dyne", "kilogram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "kilonewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "dyne", "kilopond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "meganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "megapond", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "dyne", "micronewton", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "dyne", "millinewton", PLACES), 0.0);
        assertEquals(28600.0, engine.convertAsDouble(AMOUNT, "dyne", "nanonewton", PLACES), 0.0);
        assertEquals(2.86e-05, engine.convertAsDouble(AMOUNT, "dyne", "newton", PLACES), 0.0);
        assertEquals(0.0001029, engine.convertAsDouble(AMOUNT, "dyne", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "petanewton", PLACES), 0.0);
        assertEquals(28600000.0, engine.convertAsDouble(AMOUNT, "dyne", "piconewton", PLACES), 0.0);
        assertEquals(0.0029164, engine.convertAsDouble(AMOUNT, "dyne", "pond", PLACES), 0.0);
        assertEquals(6.4e-06, engine.convertAsDouble(AMOUNT, "dyne", "pound force", PLACES), 0.0);
        assertEquals(0.0002069, engine.convertAsDouble(AMOUNT, "dyne", "poundal", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "teranewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "ton force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8600000000000004E19, engine.convertAsDouble(AMOUNT, "dyne", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "yottanewton", PLACES), 0.0);
        assertEquals(2.8600000000000004e+16, engine.convertAsDouble(AMOUNT, "dyne", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "dyne", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E36, engine.convertAsDouble(AMOUNT, "exanewton", "attonewton", PLACES), 0.0);
        assertEquals(2.86e+20, engine.convertAsDouble(AMOUNT, "exanewton", "centinewton", PLACES), 0.0);
        assertEquals(2.916388369116875E21, engine.convertAsDouble(AMOUNT, "exanewton", "decigram force", PLACES), 0.0);
        assertEquals(2.86E19, engine.convertAsDouble(AMOUNT, "exanewton", "decinewton", PLACES), 0.0);
        assertEquals(2.9163883691168748e+19, engine.convertAsDouble(AMOUNT, "exanewton", "dekagram force", PLACES), 0.0);
        assertEquals(2.86E17, engine.convertAsDouble(AMOUNT, "exanewton", "dekanewton", PLACES), 0.0);
        assertEquals(2.86E23, engine.convertAsDouble(AMOUNT, "exanewton", "dyne", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "exanewton", "exanewton", PLACES), 0.0);
        assertEquals(2.86E33, engine.convertAsDouble(AMOUNT, "exanewton", "femtonewton", PLACES), 0.0);
        assertEquals(2860000000.0, engine.convertAsDouble(AMOUNT, "exanewton", "giganewton", PLACES), 0.0);
        assertEquals(2.9163883691168747e+20, engine.convertAsDouble(AMOUNT, "exanewton", "gram force", PLACES), 0.0);
        assertEquals(2.86e+16, engine.convertAsDouble(AMOUNT, "exanewton", "hectonewton", PLACES), 0.0);
        assertEquals(2.86e+18, engine.convertAsDouble(AMOUNT, "exanewton", "joule/meter", PLACES), 0.0);
        assertEquals(2.916388369116875e+17, engine.convertAsDouble(AMOUNT, "exanewton", "kilogram force", PLACES), 0.0);
        assertEquals(2.86E15, engine.convertAsDouble(AMOUNT, "exanewton", "kilonewton", PLACES), 0.0);
        assertEquals(2.916388369116875e+17, engine.convertAsDouble(AMOUNT, "exanewton", "kilopond", PLACES), 0.0);
        assertEquals(6.42953577265172E14, engine.convertAsDouble(AMOUNT, "exanewton", "kip", PLACES), 0.0);
        assertEquals(2.86E12, engine.convertAsDouble(AMOUNT, "exanewton", "meganewton", PLACES), 0.0);
        assertEquals(2.916388369116875E14, engine.convertAsDouble(AMOUNT, "exanewton", "megapond", PLACES), 0.0);
        assertEquals(2.86e+24, engine.convertAsDouble(AMOUNT, "exanewton", "micronewton", PLACES), 0.0);
        assertEquals(2.86e+21, engine.convertAsDouble(AMOUNT, "exanewton", "millinewton", PLACES), 0.0);
        assertEquals(2.8599999999999997e+27, engine.convertAsDouble(AMOUNT, "exanewton", "nanonewton", PLACES), 0.0);
        assertEquals(2.86e+18, engine.convertAsDouble(AMOUNT, "exanewton", "newton", PLACES), 0.0);
        assertEquals(1.0287257271535213E19, engine.convertAsDouble(AMOUNT, "exanewton", "ounce force", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "exanewton", "petanewton", PLACES), 0.0);
        assertEquals(2.86e+30, engine.convertAsDouble(AMOUNT, "exanewton", "piconewton", PLACES), 0.0);
        assertEquals(2.9163883691168747e+20, engine.convertAsDouble(AMOUNT, "exanewton", "pond", PLACES), 0.0);
        assertEquals(6.429535772651721E17, engine.convertAsDouble(AMOUNT, "exanewton", "pound force", PLACES), 0.0);
        assertEquals(2.068642026922002e+19, engine.convertAsDouble(AMOUNT, "exanewton", "poundal", PLACES), 0.0);
        assertEquals(2.86E15, engine.convertAsDouble(AMOUNT, "exanewton", "sthene", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "exanewton", "teranewton", PLACES), 0.0);
        assertEquals(287032847978103.0, engine.convertAsDouble(AMOUNT, "exanewton", "ton force (long)", PLACES), 0.0);
        assertEquals(2.916388369116875E14, engine.convertAsDouble(AMOUNT, "exanewton", "ton force", PLACES), 0.0);
        assertEquals(3.2147678973547544E14, engine.convertAsDouble(AMOUNT, "exanewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86e+42, engine.convertAsDouble(AMOUNT, "exanewton", "yoctonewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "exanewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.8600000000000004E39, engine.convertAsDouble(AMOUNT, "exanewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "exanewton", "zettanewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "femtonewton", "attonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "centinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "decigram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "decinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "dekagram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "dekanewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "exanewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "femtonewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "giganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "gram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "hectonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "joule/meter", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "kilogram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "kilonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "kilopond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "meganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "megapond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "micronewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "millinewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "femtonewton", "nanonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "newton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "petanewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "femtonewton", "piconewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "pond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "pound force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "poundal", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "teranewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "ton force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8600000000000005E9, engine.convertAsDouble(AMOUNT, "femtonewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "yottanewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "femtonewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "femtonewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.8599999999999997e+27, engine.convertAsDouble(AMOUNT, "giganewton", "attonewton", PLACES), 0.0);
        assertEquals(286000000000.0, engine.convertAsDouble(AMOUNT, "giganewton", "centinewton", PLACES), 0.0);
        assertEquals(2.916388369116875E12, engine.convertAsDouble(AMOUNT, "giganewton", "decigram force", PLACES), 0.0);
        assertEquals(2.86E10, engine.convertAsDouble(AMOUNT, "giganewton", "decinewton", PLACES), 0.0);
        assertEquals(29163883691.168747, engine.convertAsDouble(AMOUNT, "giganewton", "dekagram force", PLACES), 0.0);
        assertEquals(286000000.0, engine.convertAsDouble(AMOUNT, "giganewton", "dekanewton", PLACES), 0.0);
        assertEquals(2.86E14, engine.convertAsDouble(AMOUNT, "giganewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "giganewton", "exanewton", PLACES), 0.0);
        assertEquals(2.86E24, engine.convertAsDouble(AMOUNT, "giganewton", "femtonewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "giganewton", "giganewton", PLACES), 0.0);
        assertEquals(2.916388369116875E11, engine.convertAsDouble(AMOUNT, "giganewton", "gram force", PLACES), 0.0);
        assertEquals(28600000.0, engine.convertAsDouble(AMOUNT, "giganewton", "hectonewton", PLACES), 0.0);
        assertEquals(2860000000.0, engine.convertAsDouble(AMOUNT, "giganewton", "joule/meter", PLACES), 0.0);
        assertEquals(2.916388369116875E8, engine.convertAsDouble(AMOUNT, "giganewton", "kilogram force", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "giganewton", "kilonewton", PLACES), 0.0);
        assertEquals(2.916388369116875E8, engine.convertAsDouble(AMOUNT, "giganewton", "kilopond", PLACES), 0.0);
        assertEquals(642953.5772652, engine.convertAsDouble(AMOUNT, "giganewton", "kip", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "giganewton", "meganewton", PLACES), 0.0);
        assertEquals(291638.8369117, engine.convertAsDouble(AMOUNT, "giganewton", "megapond", PLACES), 0.0);
        assertEquals(2860000000000000.0, engine.convertAsDouble(AMOUNT, "giganewton", "micronewton", PLACES), 0.0);
        assertEquals(2860000000000.0, engine.convertAsDouble(AMOUNT, "giganewton", "millinewton", PLACES), 0.0);
        assertEquals(2.86E18, engine.convertAsDouble(AMOUNT, "giganewton", "nanonewton", PLACES), 0.0);
        assertEquals(2860000000.0, engine.convertAsDouble(AMOUNT, "giganewton", "newton", PLACES), 0.0);
        assertEquals(1.0287257271535213E10, engine.convertAsDouble(AMOUNT, "giganewton", "ounce force", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "giganewton", "petanewton", PLACES), 0.0);
        assertEquals(2.86e+21, engine.convertAsDouble(AMOUNT, "giganewton", "piconewton", PLACES), 0.0);
        assertEquals(2.916388369116875E11, engine.convertAsDouble(AMOUNT, "giganewton", "pond", PLACES), 0.0);
        assertEquals(6.42953577265172E8, engine.convertAsDouble(AMOUNT, "giganewton", "pound force", PLACES), 0.0);
        assertEquals(20686420269.22002, engine.convertAsDouble(AMOUNT, "giganewton", "poundal", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "giganewton", "sthene", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "giganewton", "teranewton", PLACES), 0.0);
        assertEquals(287032.8479781, engine.convertAsDouble(AMOUNT, "giganewton", "ton force (long)", PLACES), 0.0);
        assertEquals(291638.8369117, engine.convertAsDouble(AMOUNT, "giganewton", "ton force", PLACES), 0.0);
        assertEquals(321476.7897355, engine.convertAsDouble(AMOUNT, "giganewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8600000000000004E33, engine.convertAsDouble(AMOUNT, "giganewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "giganewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.8600000000000004E30, engine.convertAsDouble(AMOUNT, "giganewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "giganewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.8047018999999996e+16, engine.convertAsDouble(AMOUNT, "gram force", "attonewton", PLACES), 0.0);
        assertEquals(2.8047019, engine.convertAsDouble(AMOUNT, "gram force", "centinewton", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "gram force", "decigram force", PLACES), 0.0);
        assertEquals(0.2804702, engine.convertAsDouble(AMOUNT, "gram force", "decinewton", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "gram force", "dekagram force", PLACES), 0.0);
        assertEquals(0.0028047, engine.convertAsDouble(AMOUNT, "gram force", "dekanewton", PLACES), 0.0);
        assertEquals(2804.7019, engine.convertAsDouble(AMOUNT, "gram force", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "gram force", "exanewton", PLACES), 0.0);
        assertEquals(28047018999999.996, engine.convertAsDouble(AMOUNT, "gram force", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "gram force", "giganewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "gram force", "gram force", PLACES), 0.0);
        assertEquals(0.0002805, engine.convertAsDouble(AMOUNT, "gram force", "hectonewton", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "gram force", "joule/meter", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "gram force", "kilogram force", PLACES), 0.0);
        assertEquals(2.8e-05, engine.convertAsDouble(AMOUNT, "gram force", "kilonewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "gram force", "kilopond", PLACES), 0.0);
        assertEquals(6.3e-06, engine.convertAsDouble(AMOUNT, "gram force", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "gram force", "meganewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "gram force", "megapond", PLACES), 0.0);
        assertEquals(28047.019, engine.convertAsDouble(AMOUNT, "gram force", "micronewton", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "gram force", "millinewton", PLACES), 0.0);
        assertEquals(28047019.0, engine.convertAsDouble(AMOUNT, "gram force", "nanonewton", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "gram force", "newton", PLACES), 0.0);
        assertEquals(0.1008835, engine.convertAsDouble(AMOUNT, "gram force", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "gram force", "petanewton", PLACES), 0.0);
        assertEquals(28047019000.0, engine.convertAsDouble(AMOUNT, "gram force", "piconewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "gram force", "pond", PLACES), 0.0);
        assertEquals(0.0063052, engine.convertAsDouble(AMOUNT, "gram force", "pound force", PLACES), 0.0);
        assertEquals(0.2028645, engine.convertAsDouble(AMOUNT, "gram force", "poundal", PLACES), 0.0);
        assertEquals(2.8e-05, engine.convertAsDouble(AMOUNT, "gram force", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "gram force", "teranewton", PLACES), 0.0);
        assertEquals(2.8e-06, engine.convertAsDouble(AMOUNT, "gram force", "ton force (long)", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "gram force", "ton force", PLACES), 0.0);
        assertEquals(3.2e-06, engine.convertAsDouble(AMOUNT, "gram force", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8047019000000003E22, engine.convertAsDouble(AMOUNT, "gram force", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "gram force", "yottanewton", PLACES), 0.0);
        assertEquals(2.8047019e+19, engine.convertAsDouble(AMOUNT, "gram force", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "gram force", "zettanewton", PLACES), 0.0);
        assertEquals(2.8599999999999997E20, engine.convertAsDouble(AMOUNT, "hectonewton", "attonewton", PLACES), 0.0);
        assertEquals(28600.0, engine.convertAsDouble(AMOUNT, "hectonewton", "centinewton", PLACES), 0.0);
        assertEquals(291638.8369117, engine.convertAsDouble(AMOUNT, "hectonewton", "decigram force", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "hectonewton", "decinewton", PLACES), 0.0);
        assertEquals(2916.3883691, engine.convertAsDouble(AMOUNT, "hectonewton", "dekagram force", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "hectonewton", "dekanewton", PLACES), 0.0);
        assertEquals(28600000.0, engine.convertAsDouble(AMOUNT, "hectonewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "hectonewton", "exanewton", PLACES), 0.0);
        assertEquals(2.85999999999999968E17, engine.convertAsDouble(AMOUNT, "hectonewton", "femtonewton", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "hectonewton", "giganewton", PLACES), 0.0);
        assertEquals(29163.8836912, engine.convertAsDouble(AMOUNT, "hectonewton", "gram force", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "hectonewton", "hectonewton", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "hectonewton", "joule/meter", PLACES), 0.0);
        assertEquals(29.1638837, engine.convertAsDouble(AMOUNT, "hectonewton", "kilogram force", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "hectonewton", "kilonewton", PLACES), 0.0);
        assertEquals(29.1638837, engine.convertAsDouble(AMOUNT, "hectonewton", "kilopond", PLACES), 0.0);
        assertEquals(0.0642954, engine.convertAsDouble(AMOUNT, "hectonewton", "kip", PLACES), 0.0);
        assertEquals(0.000286, engine.convertAsDouble(AMOUNT, "hectonewton", "meganewton", PLACES), 0.0);
        assertEquals(0.0291639, engine.convertAsDouble(AMOUNT, "hectonewton", "megapond", PLACES), 0.0);
        assertEquals(286000000.0, engine.convertAsDouble(AMOUNT, "hectonewton", "micronewton", PLACES), 0.0);
        assertEquals(286000.0, engine.convertAsDouble(AMOUNT, "hectonewton", "millinewton", PLACES), 0.0);
        assertEquals(2.86E11, engine.convertAsDouble(AMOUNT, "hectonewton", "nanonewton", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "hectonewton", "newton", PLACES), 0.0);
        assertEquals(1028.7257272, engine.convertAsDouble(AMOUNT, "hectonewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "hectonewton", "petanewton", PLACES), 0.0);
        assertEquals(286000000000000.0, engine.convertAsDouble(AMOUNT, "hectonewton", "piconewton", PLACES), 0.0);
        assertEquals(29163.8836912, engine.convertAsDouble(AMOUNT, "hectonewton", "pond", PLACES), 0.0);
        assertEquals(64.2953577, engine.convertAsDouble(AMOUNT, "hectonewton", "pound force", PLACES), 0.0);
        assertEquals(2068.6420269, engine.convertAsDouble(AMOUNT, "hectonewton", "poundal", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "hectonewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "hectonewton", "teranewton", PLACES), 0.0);
        assertEquals(0.0287033, engine.convertAsDouble(AMOUNT, "hectonewton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0291639, engine.convertAsDouble(AMOUNT, "hectonewton", "ton force", PLACES), 0.0);
        assertEquals(0.0321477, engine.convertAsDouble(AMOUNT, "hectonewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86e+26, engine.convertAsDouble(AMOUNT, "hectonewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "hectonewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.8600000000000002E23, engine.convertAsDouble(AMOUNT, "hectonewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "hectonewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.8599999999999995e+18, engine.convertAsDouble(AMOUNT, "joule/meter", "attonewton", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "joule/meter", "centinewton", PLACES), 0.0);
        assertEquals(2916.3883691, engine.convertAsDouble(AMOUNT, "joule/meter", "decigram force", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "joule/meter", "decinewton", PLACES), 0.0);
        assertEquals(29.1638837, engine.convertAsDouble(AMOUNT, "joule/meter", "dekagram force", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "joule/meter", "dekanewton", PLACES), 0.0);
        assertEquals(286000.0, engine.convertAsDouble(AMOUNT, "joule/meter", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "joule/meter", "exanewton", PLACES), 0.0);
        assertEquals(2859999999999999.5, engine.convertAsDouble(AMOUNT, "joule/meter", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "joule/meter", "giganewton", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "joule/meter", "gram force", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "joule/meter", "hectonewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "joule/meter", "joule/meter", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "joule/meter", "kilogram force", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "joule/meter", "kilonewton", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "joule/meter", "kilopond", PLACES), 0.0);
        assertEquals(0.000643, engine.convertAsDouble(AMOUNT, "joule/meter", "kip", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "joule/meter", "meganewton", PLACES), 0.0);
        assertEquals(0.0002916, engine.convertAsDouble(AMOUNT, "joule/meter", "megapond", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "joule/meter", "micronewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "joule/meter", "millinewton", PLACES), 0.0);
        assertEquals(2859999999.9999995, engine.convertAsDouble(AMOUNT, "joule/meter", "nanonewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "joule/meter", "newton", PLACES), 0.0);
        assertEquals(10.2872573, engine.convertAsDouble(AMOUNT, "joule/meter", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "joule/meter", "petanewton", PLACES), 0.0);
        assertEquals(2860000000000.0, engine.convertAsDouble(AMOUNT, "joule/meter", "piconewton", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "joule/meter", "pond", PLACES), 0.0);
        assertEquals(0.6429536, engine.convertAsDouble(AMOUNT, "joule/meter", "pound force", PLACES), 0.0);
        assertEquals(20.6864203, engine.convertAsDouble(AMOUNT, "joule/meter", "poundal", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "joule/meter", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "joule/meter", "teranewton", PLACES), 0.0);
        assertEquals(0.000287, engine.convertAsDouble(AMOUNT, "joule/meter", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0002916, engine.convertAsDouble(AMOUNT, "joule/meter", "ton force", PLACES), 0.0);
        assertEquals(0.0003215, engine.convertAsDouble(AMOUNT, "joule/meter", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86e+24, engine.convertAsDouble(AMOUNT, "joule/meter", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "joule/meter", "yottanewton", PLACES), 0.0);
        assertEquals(2.86e+21, engine.convertAsDouble(AMOUNT, "joule/meter", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "joule/meter", "zettanewton", PLACES), 0.0);
        assertEquals(2.804701899999999e+19, engine.convertAsDouble(AMOUNT, "kilogram force", "attonewton", PLACES), 0.0);
        assertEquals(2804.7019, engine.convertAsDouble(AMOUNT, "kilogram force", "centinewton", PLACES), 0.0);
        assertEquals(28600.0, engine.convertAsDouble(AMOUNT, "kilogram force", "decigram force", PLACES), 0.0);
        assertEquals(280.47019, engine.convertAsDouble(AMOUNT, "kilogram force", "decinewton", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "kilogram force", "dekagram force", PLACES), 0.0);
        assertEquals(2.8047019, engine.convertAsDouble(AMOUNT, "kilogram force", "dekanewton", PLACES), 0.0);
        assertEquals(2804701.9, engine.convertAsDouble(AMOUNT, "kilogram force", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilogram force", "exanewton", PLACES), 0.0);
        assertEquals(2.804701899999999e+16, engine.convertAsDouble(AMOUNT, "kilogram force", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilogram force", "giganewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "kilogram force", "gram force", PLACES), 0.0);
        assertEquals(0.2804702, engine.convertAsDouble(AMOUNT, "kilogram force", "hectonewton", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "kilogram force", "joule/meter", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "kilogram force", "kilogram force", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "kilogram force", "kilonewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "kilogram force", "kilopond", PLACES), 0.0);
        assertEquals(0.0063052, engine.convertAsDouble(AMOUNT, "kilogram force", "kip", PLACES), 0.0);
        assertEquals(2.8e-05, engine.convertAsDouble(AMOUNT, "kilogram force", "meganewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "kilogram force", "megapond", PLACES), 0.0);
        assertEquals(28047019.0, engine.convertAsDouble(AMOUNT, "kilogram force", "micronewton", PLACES), 0.0);
        assertEquals(28047.019, engine.convertAsDouble(AMOUNT, "kilogram force", "millinewton", PLACES), 0.0);
        assertEquals(2.8047018999999996E10, engine.convertAsDouble(AMOUNT, "kilogram force", "nanonewton", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "kilogram force", "newton", PLACES), 0.0);
        assertEquals(100.8835315, engine.convertAsDouble(AMOUNT, "kilogram force", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilogram force", "petanewton", PLACES), 0.0);
        assertEquals(28047019000000.0, engine.convertAsDouble(AMOUNT, "kilogram force", "piconewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "kilogram force", "pond", PLACES), 0.0);
        assertEquals(6.3052207, engine.convertAsDouble(AMOUNT, "kilogram force", "pound force", PLACES), 0.0);
        assertEquals(202.8644833, engine.convertAsDouble(AMOUNT, "kilogram force", "poundal", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "kilogram force", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilogram force", "teranewton", PLACES), 0.0);
        assertEquals(0.0028148, engine.convertAsDouble(AMOUNT, "kilogram force", "ton force (long)", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "kilogram force", "ton force", PLACES), 0.0);
        assertEquals(0.0031526, engine.convertAsDouble(AMOUNT, "kilogram force", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8047018999999996e+25, engine.convertAsDouble(AMOUNT, "kilogram force", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilogram force", "yottanewton", PLACES), 0.0);
        assertEquals(2.8047019000000003E22, engine.convertAsDouble(AMOUNT, "kilogram force", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilogram force", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E21, engine.convertAsDouble(AMOUNT, "kilonewton", "attonewton", PLACES), 0.0);
        assertEquals(286000.0, engine.convertAsDouble(AMOUNT, "kilonewton", "centinewton", PLACES), 0.0);
        assertEquals(2916388.3691169, engine.convertAsDouble(AMOUNT, "kilonewton", "decigram force", PLACES), 0.0);
        assertEquals(28600.0, engine.convertAsDouble(AMOUNT, "kilonewton", "decinewton", PLACES), 0.0);
        assertEquals(29163.8836912, engine.convertAsDouble(AMOUNT, "kilonewton", "dekagram force", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "kilonewton", "dekanewton", PLACES), 0.0);
        assertEquals(2.86E8, engine.convertAsDouble(AMOUNT, "kilonewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilonewton", "exanewton", PLACES), 0.0);
        assertEquals(2.86E18, engine.convertAsDouble(AMOUNT, "kilonewton", "femtonewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "kilonewton", "giganewton", PLACES), 0.0);
        assertEquals(291638.8369117, engine.convertAsDouble(AMOUNT, "kilonewton", "gram force", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "kilonewton", "hectonewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "kilonewton", "joule/meter", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "kilonewton", "kilogram force", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "kilonewton", "kilonewton", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "kilonewton", "kilopond", PLACES), 0.0);
        assertEquals(0.6429536, engine.convertAsDouble(AMOUNT, "kilonewton", "kip", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "kilonewton", "meganewton", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "kilonewton", "megapond", PLACES), 0.0);
        assertEquals(2860000000.0, engine.convertAsDouble(AMOUNT, "kilonewton", "micronewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "kilonewton", "millinewton", PLACES), 0.0);
        assertEquals(2.86E12, engine.convertAsDouble(AMOUNT, "kilonewton", "nanonewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "kilonewton", "newton", PLACES), 0.0);
        assertEquals(10287.2572715, engine.convertAsDouble(AMOUNT, "kilonewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilonewton", "petanewton", PLACES), 0.0);
        assertEquals(2860000000000000.0, engine.convertAsDouble(AMOUNT, "kilonewton", "piconewton", PLACES), 0.0);
        assertEquals(291638.8369117, engine.convertAsDouble(AMOUNT, "kilonewton", "pond", PLACES), 0.0);
        assertEquals(642.9535773, engine.convertAsDouble(AMOUNT, "kilonewton", "pound force", PLACES), 0.0);
        assertEquals(20686.4202692, engine.convertAsDouble(AMOUNT, "kilonewton", "poundal", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "kilonewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilonewton", "teranewton", PLACES), 0.0);
        assertEquals(0.2870328, engine.convertAsDouble(AMOUNT, "kilonewton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "kilonewton", "ton force", PLACES), 0.0);
        assertEquals(0.3214768, engine.convertAsDouble(AMOUNT, "kilonewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86E27, engine.convertAsDouble(AMOUNT, "kilonewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilonewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.8600000000000005E24, engine.convertAsDouble(AMOUNT, "kilonewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilonewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.804701899999999e+19, engine.convertAsDouble(AMOUNT, "kilopond", "attonewton", PLACES), 0.0);
        assertEquals(2804.7019, engine.convertAsDouble(AMOUNT, "kilopond", "centinewton", PLACES), 0.0);
        assertEquals(28600.0, engine.convertAsDouble(AMOUNT, "kilopond", "decigram force", PLACES), 0.0);
        assertEquals(280.47019, engine.convertAsDouble(AMOUNT, "kilopond", "decinewton", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "kilopond", "dekagram force", PLACES), 0.0);
        assertEquals(2.8047019, engine.convertAsDouble(AMOUNT, "kilopond", "dekanewton", PLACES), 0.0);
        assertEquals(2804701.9, engine.convertAsDouble(AMOUNT, "kilopond", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilopond", "exanewton", PLACES), 0.0);
        assertEquals(2.804701899999999e+16, engine.convertAsDouble(AMOUNT, "kilopond", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilopond", "giganewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "kilopond", "gram force", PLACES), 0.0);
        assertEquals(0.2804702, engine.convertAsDouble(AMOUNT, "kilopond", "hectonewton", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "kilopond", "joule/meter", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "kilopond", "kilogram force", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "kilopond", "kilonewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "kilopond", "kilopond", PLACES), 0.0);
        assertEquals(0.0063052, engine.convertAsDouble(AMOUNT, "kilopond", "kip", PLACES), 0.0);
        assertEquals(2.8e-05, engine.convertAsDouble(AMOUNT, "kilopond", "meganewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "kilopond", "megapond", PLACES), 0.0);
        assertEquals(28047019.0, engine.convertAsDouble(AMOUNT, "kilopond", "micronewton", PLACES), 0.0);
        assertEquals(28047.019, engine.convertAsDouble(AMOUNT, "kilopond", "millinewton", PLACES), 0.0);
        assertEquals(2.8047018999999996E10, engine.convertAsDouble(AMOUNT, "kilopond", "nanonewton", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "kilopond", "newton", PLACES), 0.0);
        assertEquals(100.8835315, engine.convertAsDouble(AMOUNT, "kilopond", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilopond", "petanewton", PLACES), 0.0);
        assertEquals(28047019000000.0, engine.convertAsDouble(AMOUNT, "kilopond", "piconewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "kilopond", "pond", PLACES), 0.0);
        assertEquals(6.3052207, engine.convertAsDouble(AMOUNT, "kilopond", "pound force", PLACES), 0.0);
        assertEquals(202.8644833, engine.convertAsDouble(AMOUNT, "kilopond", "poundal", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "kilopond", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilopond", "teranewton", PLACES), 0.0);
        assertEquals(0.0028148, engine.convertAsDouble(AMOUNT, "kilopond", "ton force (long)", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "kilopond", "ton force", PLACES), 0.0);
        assertEquals(0.0031526, engine.convertAsDouble(AMOUNT, "kilopond", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8047018999999996e+25, engine.convertAsDouble(AMOUNT, "kilopond", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilopond", "yottanewton", PLACES), 0.0);
        assertEquals(2.8047019000000003E22, engine.convertAsDouble(AMOUNT, "kilopond", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kilopond", "zettanewton", PLACES), 0.0);
        assertEquals(1.2721913819645027E22, engine.convertAsDouble(AMOUNT, "kip", "attonewton", PLACES), 0.0);
        assertEquals(1272191.3819645, engine.convertAsDouble(AMOUNT, "kip", "centinewton", PLACES), 0.0);
        assertEquals(1.2972741782E7, engine.convertAsDouble(AMOUNT, "kip", "decigram force", PLACES), 0.0);
        assertEquals(127219.1381965, engine.convertAsDouble(AMOUNT, "kip", "decinewton", PLACES), 0.0);
        assertEquals(129727.41782, engine.convertAsDouble(AMOUNT, "kip", "dekagram force", PLACES), 0.0);
        assertEquals(1272.191382, engine.convertAsDouble(AMOUNT, "kip", "dekanewton", PLACES), 0.0);
        assertEquals(1.2721913819645026E9, engine.convertAsDouble(AMOUNT, "kip", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kip", "exanewton", PLACES), 0.0);
        assertEquals(1.2721913819645028E19, engine.convertAsDouble(AMOUNT, "kip", "femtonewton", PLACES), 0.0);
        assertEquals(1.27e-05, engine.convertAsDouble(AMOUNT, "kip", "giganewton", PLACES), 0.0);
        assertEquals(1297274.1782, engine.convertAsDouble(AMOUNT, "kip", "gram force", PLACES), 0.0);
        assertEquals(127.2191382, engine.convertAsDouble(AMOUNT, "kip", "hectonewton", PLACES), 0.0);
        assertEquals(12721.9138196, engine.convertAsDouble(AMOUNT, "kip", "joule/meter", PLACES), 0.0);
        assertEquals(1297.2741782, engine.convertAsDouble(AMOUNT, "kip", "kilogram force", PLACES), 0.0);
        assertEquals(12.7219138, engine.convertAsDouble(AMOUNT, "kip", "kilonewton", PLACES), 0.0);
        assertEquals(1297.2741782, engine.convertAsDouble(AMOUNT, "kip", "kilopond", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "kip", "kip", PLACES), 0.0);
        assertEquals(0.0127219, engine.convertAsDouble(AMOUNT, "kip", "meganewton", PLACES), 0.0);
        assertEquals(1.2972742, engine.convertAsDouble(AMOUNT, "kip", "megapond", PLACES), 0.0);
        assertEquals(1.272191381964503E10, engine.convertAsDouble(AMOUNT, "kip", "micronewton", PLACES), 0.0);
        assertEquals(1.2721913819645E7, engine.convertAsDouble(AMOUNT, "kip", "millinewton", PLACES), 0.0);
        assertEquals(1.2721913819645027E13, engine.convertAsDouble(AMOUNT, "kip", "nanonewton", PLACES), 0.0);
        assertEquals(12721.9138196, engine.convertAsDouble(AMOUNT, "kip", "newton", PLACES), 0.0);
        assertEquals(45760.000157, engine.convertAsDouble(AMOUNT, "kip", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kip", "petanewton", PLACES), 0.0);
        assertEquals(1.2721913819645028E16, engine.convertAsDouble(AMOUNT, "kip", "piconewton", PLACES), 0.0);
        assertEquals(1297274.1782, engine.convertAsDouble(AMOUNT, "kip", "pond", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "kip", "pound force", PLACES), 0.0);
        assertEquals(92017.7817839, engine.convertAsDouble(AMOUNT, "kip", "poundal", PLACES), 0.0);
        assertEquals(12.7219138, engine.convertAsDouble(AMOUNT, "kip", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kip", "teranewton", PLACES), 0.0);
        assertEquals(1.2767857, engine.convertAsDouble(AMOUNT, "kip", "ton force (long)", PLACES), 0.0);
        assertEquals(1.2972742, engine.convertAsDouble(AMOUNT, "kip", "ton force", PLACES), 0.0);
        assertEquals(1.43, engine.convertAsDouble(AMOUNT, "kip", "ton force (short)", PLACES), 0.0);
        assertEquals(1.272191381964503E28, engine.convertAsDouble(AMOUNT, "kip", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kip", "yottanewton", PLACES), 0.0);
        assertEquals(1.2721913819645028E25, engine.convertAsDouble(AMOUNT, "kip", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "kip", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E24, engine.convertAsDouble(AMOUNT, "meganewton", "attonewton", PLACES), 0.0);
        assertEquals(286000000.0, engine.convertAsDouble(AMOUNT, "meganewton", "centinewton", PLACES), 0.0);
        assertEquals(2.916388369116875E9, engine.convertAsDouble(AMOUNT, "meganewton", "decigram force", PLACES), 0.0);
        assertEquals(28600000.0, engine.convertAsDouble(AMOUNT, "meganewton", "decinewton", PLACES), 0.0);
        assertEquals(29163883.6911687, engine.convertAsDouble(AMOUNT, "meganewton", "dekagram force", PLACES), 0.0);
        assertEquals(286000.0, engine.convertAsDouble(AMOUNT, "meganewton", "dekanewton", PLACES), 0.0);
        assertEquals(2.86E11, engine.convertAsDouble(AMOUNT, "meganewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "meganewton", "exanewton", PLACES), 0.0);
        assertEquals(2.86E21, engine.convertAsDouble(AMOUNT, "meganewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "meganewton", "giganewton", PLACES), 0.0);
        assertEquals(2.916388369116875E8, engine.convertAsDouble(AMOUNT, "meganewton", "gram force", PLACES), 0.0);
        assertEquals(28600.0, engine.convertAsDouble(AMOUNT, "meganewton", "hectonewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "meganewton", "joule/meter", PLACES), 0.0);
        assertEquals(291638.8369117, engine.convertAsDouble(AMOUNT, "meganewton", "kilogram force", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "meganewton", "kilonewton", PLACES), 0.0);
        assertEquals(291638.8369117, engine.convertAsDouble(AMOUNT, "meganewton", "kilopond", PLACES), 0.0);
        assertEquals(642.9535773, engine.convertAsDouble(AMOUNT, "meganewton", "kip", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "meganewton", "meganewton", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "meganewton", "megapond", PLACES), 0.0);
        assertEquals(2860000000000.0, engine.convertAsDouble(AMOUNT, "meganewton", "micronewton", PLACES), 0.0);
        assertEquals(2860000000.0, engine.convertAsDouble(AMOUNT, "meganewton", "millinewton", PLACES), 0.0);
        assertEquals(2.86E15, engine.convertAsDouble(AMOUNT, "meganewton", "nanonewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "meganewton", "newton", PLACES), 0.0);
        assertEquals(1.02872572715352E7, engine.convertAsDouble(AMOUNT, "meganewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "meganewton", "petanewton", PLACES), 0.0);
        assertEquals(2.86e+18, engine.convertAsDouble(AMOUNT, "meganewton", "piconewton", PLACES), 0.0);
        assertEquals(2.916388369116875E8, engine.convertAsDouble(AMOUNT, "meganewton", "pond", PLACES), 0.0);
        assertEquals(642953.5772652, engine.convertAsDouble(AMOUNT, "meganewton", "pound force", PLACES), 0.0);
        assertEquals(20686420.26922, engine.convertAsDouble(AMOUNT, "meganewton", "poundal", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "meganewton", "sthene", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "meganewton", "teranewton", PLACES), 0.0);
        assertEquals(287.032848, engine.convertAsDouble(AMOUNT, "meganewton", "ton force (long)", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "meganewton", "ton force", PLACES), 0.0);
        assertEquals(321.4767897, engine.convertAsDouble(AMOUNT, "meganewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8600000000000004E30, engine.convertAsDouble(AMOUNT, "meganewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "meganewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.86e+27, engine.convertAsDouble(AMOUNT, "meganewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "meganewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.8047018999999994e+22, engine.convertAsDouble(AMOUNT, "megapond", "attonewton", PLACES), 0.0);
        assertEquals(2804701.9, engine.convertAsDouble(AMOUNT, "megapond", "centinewton", PLACES), 0.0);
        assertEquals(28600000.0, engine.convertAsDouble(AMOUNT, "megapond", "decigram force", PLACES), 0.0);
        assertEquals(280470.19, engine.convertAsDouble(AMOUNT, "megapond", "decinewton", PLACES), 0.0);
        assertEquals(286000.0, engine.convertAsDouble(AMOUNT, "megapond", "dekagram force", PLACES), 0.0);
        assertEquals(2804.7019, engine.convertAsDouble(AMOUNT, "megapond", "dekanewton", PLACES), 0.0);
        assertEquals(2804701899.9999995, engine.convertAsDouble(AMOUNT, "megapond", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "megapond", "exanewton", PLACES), 0.0);
        assertEquals(2.8047018999999996e+19, engine.convertAsDouble(AMOUNT, "megapond", "femtonewton", PLACES), 0.0);
        assertEquals(2.8e-05, engine.convertAsDouble(AMOUNT, "megapond", "giganewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "megapond", "gram force", PLACES), 0.0);
        assertEquals(280.47019, engine.convertAsDouble(AMOUNT, "megapond", "hectonewton", PLACES), 0.0);
        assertEquals(28047.019, engine.convertAsDouble(AMOUNT, "megapond", "joule/meter", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "megapond", "kilogram force", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "megapond", "kilonewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "megapond", "kilopond", PLACES), 0.0);
        assertEquals(6.3052207, engine.convertAsDouble(AMOUNT, "megapond", "kip", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "megapond", "meganewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "megapond", "megapond", PLACES), 0.0);
        assertEquals(2.8047018999999996E10, engine.convertAsDouble(AMOUNT, "megapond", "micronewton", PLACES), 0.0);
        assertEquals(28047019.0, engine.convertAsDouble(AMOUNT, "megapond", "millinewton", PLACES), 0.0);
        assertEquals(28047018999999.996, engine.convertAsDouble(AMOUNT, "megapond", "nanonewton", PLACES), 0.0);
        assertEquals(28047.019, engine.convertAsDouble(AMOUNT, "megapond", "newton", PLACES), 0.0);
        assertEquals(100883.5315219, engine.convertAsDouble(AMOUNT, "megapond", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "megapond", "petanewton", PLACES), 0.0);
        assertEquals(2.8047018999999996E16, engine.convertAsDouble(AMOUNT, "megapond", "piconewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "megapond", "pond", PLACES), 0.0);
        assertEquals(6305.2206985, engine.convertAsDouble(AMOUNT, "megapond", "pound force", PLACES), 0.0);
        assertEquals(202864.4833331, engine.convertAsDouble(AMOUNT, "megapond", "poundal", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "megapond", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "megapond", "teranewton", PLACES), 0.0);
        assertEquals(2.8148307, engine.convertAsDouble(AMOUNT, "megapond", "ton force (long)", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "megapond", "ton force", PLACES), 0.0);
        assertEquals(3.1526104, engine.convertAsDouble(AMOUNT, "megapond", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8047019e+28, engine.convertAsDouble(AMOUNT, "megapond", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "megapond", "yottanewton", PLACES), 0.0);
        assertEquals(2.8047019e+25, engine.convertAsDouble(AMOUNT, "megapond", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "megapond", "zettanewton", PLACES), 0.0);
        assertEquals(2859999999999.9995, engine.convertAsDouble(AMOUNT, "micronewton", "attonewton", PLACES), 0.0);
        assertEquals(0.000286, engine.convertAsDouble(AMOUNT, "micronewton", "centinewton", PLACES), 0.0);
        assertEquals(0.0029164, engine.convertAsDouble(AMOUNT, "micronewton", "decigram force", PLACES), 0.0);
        assertEquals(2.86e-05, engine.convertAsDouble(AMOUNT, "micronewton", "decinewton", PLACES), 0.0);
        assertEquals(2.92e-05, engine.convertAsDouble(AMOUNT, "micronewton", "dekagram force", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "micronewton", "dekanewton", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "micronewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "exanewton", PLACES), 0.0);
        assertEquals(2859999999.9999995, engine.convertAsDouble(AMOUNT, "micronewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "giganewton", PLACES), 0.0);
        assertEquals(0.0002916, engine.convertAsDouble(AMOUNT, "micronewton", "gram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "hectonewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "micronewton", "joule/meter", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "micronewton", "kilogram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "kilonewton", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "micronewton", "kilopond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "meganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "megapond", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "micronewton", "micronewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "micronewton", "millinewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "micronewton", "nanonewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "micronewton", "newton", PLACES), 0.0);
        assertEquals(1.03e-05, engine.convertAsDouble(AMOUNT, "micronewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "petanewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "micronewton", "piconewton", PLACES), 0.0);
        assertEquals(0.0002916, engine.convertAsDouble(AMOUNT, "micronewton", "pond", PLACES), 0.0);
        assertEquals(6e-07, engine.convertAsDouble(AMOUNT, "micronewton", "pound force", PLACES), 0.0);
        assertEquals(2.07e-05, engine.convertAsDouble(AMOUNT, "micronewton", "poundal", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "teranewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "ton force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86e+18, engine.convertAsDouble(AMOUNT, "micronewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "yottanewton", PLACES), 0.0);
        assertEquals(2860000000000000.0, engine.convertAsDouble(AMOUNT, "micronewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "micronewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E15, engine.convertAsDouble(AMOUNT, "millinewton", "attonewton", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "millinewton", "centinewton", PLACES), 0.0);
        assertEquals(2.9163884, engine.convertAsDouble(AMOUNT, "millinewton", "decigram force", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "millinewton", "decinewton", PLACES), 0.0);
        assertEquals(0.0291639, engine.convertAsDouble(AMOUNT, "millinewton", "dekagram force", PLACES), 0.0);
        assertEquals(0.000286, engine.convertAsDouble(AMOUNT, "millinewton", "dekanewton", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "millinewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "millinewton", "exanewton", PLACES), 0.0);
        assertEquals(2.86E12, engine.convertAsDouble(AMOUNT, "millinewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "millinewton", "giganewton", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "millinewton", "gram force", PLACES), 0.0);
        assertEquals(2.86e-05, engine.convertAsDouble(AMOUNT, "millinewton", "hectonewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "millinewton", "joule/meter", PLACES), 0.0);
        assertEquals(0.0002916, engine.convertAsDouble(AMOUNT, "millinewton", "kilogram force", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "millinewton", "kilonewton", PLACES), 0.0);
        assertEquals(0.0002916, engine.convertAsDouble(AMOUNT, "millinewton", "kilopond", PLACES), 0.0);
        assertEquals(6e-07, engine.convertAsDouble(AMOUNT, "millinewton", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "millinewton", "meganewton", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "millinewton", "megapond", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "millinewton", "micronewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "millinewton", "millinewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "millinewton", "nanonewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "millinewton", "newton", PLACES), 0.0);
        assertEquals(0.0102873, engine.convertAsDouble(AMOUNT, "millinewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "millinewton", "petanewton", PLACES), 0.0);
        assertEquals(2860000000.0, engine.convertAsDouble(AMOUNT, "millinewton", "piconewton", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "millinewton", "pond", PLACES), 0.0);
        assertEquals(0.000643, engine.convertAsDouble(AMOUNT, "millinewton", "pound force", PLACES), 0.0);
        assertEquals(0.0206864, engine.convertAsDouble(AMOUNT, "millinewton", "poundal", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "millinewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "millinewton", "teranewton", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "millinewton", "ton force (long)", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "millinewton", "ton force", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "millinewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8600000000000005E21, engine.convertAsDouble(AMOUNT, "millinewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "millinewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.8600000000000005E18, engine.convertAsDouble(AMOUNT, "millinewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "millinewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E9, engine.convertAsDouble(AMOUNT, "nanonewton", "attonewton", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "nanonewton", "centinewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "nanonewton", "decigram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "decinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "dekagram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "dekanewton", PLACES), 0.0);
        assertEquals(0.000286, engine.convertAsDouble(AMOUNT, "nanonewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "exanewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "nanonewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "giganewton", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "nanonewton", "gram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "hectonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "joule/meter", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "kilogram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "kilonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "kilopond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "meganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "megapond", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "nanonewton", "micronewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "nanonewton", "millinewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "nanonewton", "nanonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "newton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "petanewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "nanonewton", "piconewton", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "nanonewton", "pond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "pound force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "poundal", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "teranewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "ton force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8600000000000005E15, engine.convertAsDouble(AMOUNT, "nanonewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.8600000000000005E12, engine.convertAsDouble(AMOUNT, "nanonewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "nanonewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.8599999999999995e+18, engine.convertAsDouble(AMOUNT, "newton", "attonewton", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "newton", "centinewton", PLACES), 0.0);
        assertEquals(2916.3883691, engine.convertAsDouble(AMOUNT, "newton", "decigram force", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "newton", "decinewton", PLACES), 0.0);
        assertEquals(29.1638837, engine.convertAsDouble(AMOUNT, "newton", "dekagram force", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "newton", "dekanewton", PLACES), 0.0);
        assertEquals(286000.0, engine.convertAsDouble(AMOUNT, "newton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "newton", "exanewton", PLACES), 0.0);
        assertEquals(2859999999999999.5, engine.convertAsDouble(AMOUNT, "newton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "newton", "giganewton", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "newton", "gram force", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "newton", "hectonewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "newton", "joule/meter", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "newton", "kilogram force", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "newton", "kilonewton", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "newton", "kilopond", PLACES), 0.0);
        assertEquals(0.000643, engine.convertAsDouble(AMOUNT, "newton", "kip", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "newton", "meganewton", PLACES), 0.0);
        assertEquals(0.0002916, engine.convertAsDouble(AMOUNT, "newton", "megapond", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "newton", "micronewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "newton", "millinewton", PLACES), 0.0);
        assertEquals(2859999999.9999995, engine.convertAsDouble(AMOUNT, "newton", "nanonewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "newton", "newton", PLACES), 0.0);
        assertEquals(10.2872573, engine.convertAsDouble(AMOUNT, "newton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "newton", "petanewton", PLACES), 0.0);
        assertEquals(2860000000000.0, engine.convertAsDouble(AMOUNT, "newton", "piconewton", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "newton", "pond", PLACES), 0.0);
        assertEquals(0.6429536, engine.convertAsDouble(AMOUNT, "newton", "pound force", PLACES), 0.0);
        assertEquals(20.6864203, engine.convertAsDouble(AMOUNT, "newton", "poundal", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "newton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "newton", "teranewton", PLACES), 0.0);
        assertEquals(0.000287, engine.convertAsDouble(AMOUNT, "newton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0002916, engine.convertAsDouble(AMOUNT, "newton", "ton force", PLACES), 0.0);
        assertEquals(0.0003215, engine.convertAsDouble(AMOUNT, "newton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86e+24, engine.convertAsDouble(AMOUNT, "newton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "newton", "yottanewton", PLACES), 0.0);
        assertEquals(2.86e+21, engine.convertAsDouble(AMOUNT, "newton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "newton", "zettanewton", PLACES), 0.0);
        assertEquals(7.95119611E17, engine.convertAsDouble(AMOUNT, "ounce force", "attonewton", PLACES), 0.0);
        assertEquals(79.5119611, engine.convertAsDouble(AMOUNT, "ounce force", "centinewton", PLACES), 0.0);
        assertEquals(810.7963586, engine.convertAsDouble(AMOUNT, "ounce force", "decigram force", PLACES), 0.0);
        assertEquals(7.9511961, engine.convertAsDouble(AMOUNT, "ounce force", "decinewton", PLACES), 0.0);
        assertEquals(8.1079636, engine.convertAsDouble(AMOUNT, "ounce force", "dekagram force", PLACES), 0.0);
        assertEquals(0.079512, engine.convertAsDouble(AMOUNT, "ounce force", "dekanewton", PLACES), 0.0);
        assertEquals(79511.9611, engine.convertAsDouble(AMOUNT, "ounce force", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ounce force", "exanewton", PLACES), 0.0);
        assertEquals(795119610999999.9, engine.convertAsDouble(AMOUNT, "ounce force", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ounce force", "giganewton", PLACES), 0.0);
        assertEquals(81.0796359, engine.convertAsDouble(AMOUNT, "ounce force", "gram force", PLACES), 0.0);
        assertEquals(0.0079512, engine.convertAsDouble(AMOUNT, "ounce force", "hectonewton", PLACES), 0.0);
        assertEquals(0.7951196, engine.convertAsDouble(AMOUNT, "ounce force", "joule/meter", PLACES), 0.0);
        assertEquals(0.0810796, engine.convertAsDouble(AMOUNT, "ounce force", "kilogram force", PLACES), 0.0);
        assertEquals(0.0007951, engine.convertAsDouble(AMOUNT, "ounce force", "kilonewton", PLACES), 0.0);
        assertEquals(0.0810796, engine.convertAsDouble(AMOUNT, "ounce force", "kilopond", PLACES), 0.0);
        assertEquals(1.787E-4, engine.convertAsDouble(AMOUNT, "ounce force", "kip", PLACES), 0.0);
        assertEquals(8e-07, engine.convertAsDouble(AMOUNT, "ounce force", "meganewton", PLACES), 0.0);
        assertEquals(8.11e-05, engine.convertAsDouble(AMOUNT, "ounce force", "megapond", PLACES), 0.0);
        assertEquals(795119.611, engine.convertAsDouble(AMOUNT, "ounce force", "micronewton", PLACES), 0.0);
        assertEquals(795.119611, engine.convertAsDouble(AMOUNT, "ounce force", "millinewton", PLACES), 0.0);
        assertEquals(795119610.9999999, engine.convertAsDouble(AMOUNT, "ounce force", "nanonewton", PLACES), 0.0);
        assertEquals(0.7951196, engine.convertAsDouble(AMOUNT, "ounce force", "newton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "ounce force", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ounce force", "petanewton", PLACES), 0.0);
        assertEquals(795119611000.0, engine.convertAsDouble(AMOUNT, "ounce force", "piconewton", PLACES), 0.0);
        assertEquals(81.0796359, engine.convertAsDouble(AMOUNT, "ounce force", "pond", PLACES), 0.0);
        assertEquals(0.17875, engine.convertAsDouble(AMOUNT, "ounce force", "pound force", PLACES), 0.0);
        assertEquals(5.7511113, engine.convertAsDouble(AMOUNT, "ounce force", "poundal", PLACES), 0.0);
        assertEquals(0.0007951, engine.convertAsDouble(AMOUNT, "ounce force", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ounce force", "teranewton", PLACES), 0.0);
        assertEquals(7.98e-05, engine.convertAsDouble(AMOUNT, "ounce force", "ton force (long)", PLACES), 0.0);
        assertEquals(8.11e-05, engine.convertAsDouble(AMOUNT, "ounce force", "ton force", PLACES), 0.0);
        assertEquals(8.94e-05, engine.convertAsDouble(AMOUNT, "ounce force", "ton force (short)", PLACES), 0.0);
        assertEquals(7.95119611e+23, engine.convertAsDouble(AMOUNT, "ounce force", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ounce force", "yottanewton", PLACES), 0.0);
        assertEquals(7.951196110000001E20, engine.convertAsDouble(AMOUNT, "ounce force", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ounce force", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E33, engine.convertAsDouble(AMOUNT, "petanewton", "attonewton", PLACES), 0.0);
        assertEquals(2.86e+17, engine.convertAsDouble(AMOUNT, "petanewton", "centinewton", PLACES), 0.0);
        assertEquals(2.9163883691168748E18, engine.convertAsDouble(AMOUNT, "petanewton", "decigram force", PLACES), 0.0);
        assertEquals(2.86E16, engine.convertAsDouble(AMOUNT, "petanewton", "decinewton", PLACES), 0.0);
        assertEquals(2.9163883691168748E16, engine.convertAsDouble(AMOUNT, "petanewton", "dekagram force", PLACES), 0.0);
        assertEquals(286000000000000.0, engine.convertAsDouble(AMOUNT, "petanewton", "dekanewton", PLACES), 0.0);
        assertEquals(2.8599999999999997E20, engine.convertAsDouble(AMOUNT, "petanewton", "dyne", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "petanewton", "exanewton", PLACES), 0.0);
        assertEquals(2.86E30, engine.convertAsDouble(AMOUNT, "petanewton", "femtonewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "petanewton", "giganewton", PLACES), 0.0);
        assertEquals(2.916388369116875e+17, engine.convertAsDouble(AMOUNT, "petanewton", "gram force", PLACES), 0.0);
        assertEquals(28600000000000.0, engine.convertAsDouble(AMOUNT, "petanewton", "hectonewton", PLACES), 0.0);
        assertEquals(2860000000000000.0, engine.convertAsDouble(AMOUNT, "petanewton", "joule/meter", PLACES), 0.0);
        assertEquals(2.916388369116875E14, engine.convertAsDouble(AMOUNT, "petanewton", "kilogram force", PLACES), 0.0);
        assertEquals(2.86E12, engine.convertAsDouble(AMOUNT, "petanewton", "kilonewton", PLACES), 0.0);
        assertEquals(2.916388369116875E14, engine.convertAsDouble(AMOUNT, "petanewton", "kilopond", PLACES), 0.0);
        assertEquals(6.42953577265172E11, engine.convertAsDouble(AMOUNT, "petanewton", "kip", PLACES), 0.0);
        assertEquals(2.86E9, engine.convertAsDouble(AMOUNT, "petanewton", "meganewton", PLACES), 0.0);
        assertEquals(2.916388369116875E11, engine.convertAsDouble(AMOUNT, "petanewton", "megapond", PLACES), 0.0);
        assertEquals(2.86e+21, engine.convertAsDouble(AMOUNT, "petanewton", "micronewton", PLACES), 0.0);
        assertEquals(2.86e+18, engine.convertAsDouble(AMOUNT, "petanewton", "millinewton", PLACES), 0.0);
        assertEquals(2.86E24, engine.convertAsDouble(AMOUNT, "petanewton", "nanonewton", PLACES), 0.0);
        assertEquals(2860000000000000.0, engine.convertAsDouble(AMOUNT, "petanewton", "newton", PLACES), 0.0);
        assertEquals(1.0287257271535212e+16, engine.convertAsDouble(AMOUNT, "petanewton", "ounce force", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "petanewton", "petanewton", PLACES), 0.0);
        assertEquals(2.86e+27, engine.convertAsDouble(AMOUNT, "petanewton", "piconewton", PLACES), 0.0);
        assertEquals(2.916388369116875e+17, engine.convertAsDouble(AMOUNT, "petanewton", "pond", PLACES), 0.0);
        assertEquals(6.42953577265172E14, engine.convertAsDouble(AMOUNT, "petanewton", "pound force", PLACES), 0.0);
        assertEquals(2.068642026922002e+16, engine.convertAsDouble(AMOUNT, "petanewton", "poundal", PLACES), 0.0);
        assertEquals(2.86E12, engine.convertAsDouble(AMOUNT, "petanewton", "sthene", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "petanewton", "teranewton", PLACES), 0.0);
        assertEquals(2.87032847978103E11, engine.convertAsDouble(AMOUNT, "petanewton", "ton force (long)", PLACES), 0.0);
        assertEquals(2.916388369116875E11, engine.convertAsDouble(AMOUNT, "petanewton", "ton force", PLACES), 0.0);
        assertEquals(3.214767897354754E11, engine.convertAsDouble(AMOUNT, "petanewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8600000000000004E39, engine.convertAsDouble(AMOUNT, "petanewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "petanewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.86e+36, engine.convertAsDouble(AMOUNT, "petanewton", "zeptonewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "petanewton", "zettanewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "piconewton", "attonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "centinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "decigram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "decinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "dekagram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "dekanewton", PLACES), 0.0);
        assertEquals(3e-07, engine.convertAsDouble(AMOUNT, "piconewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "exanewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "piconewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "giganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "gram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "hectonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "joule/meter", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "kilogram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "kilonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "kilopond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "meganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "megapond", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "piconewton", "micronewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "millinewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "piconewton", "nanonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "newton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "petanewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "piconewton", "piconewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "pond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "pound force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "poundal", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "teranewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "ton force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2860000000000.0, engine.convertAsDouble(AMOUNT, "piconewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "yottanewton", PLACES), 0.0);
        assertEquals(2860000000.0, engine.convertAsDouble(AMOUNT, "piconewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "piconewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.8047018999999996e+16, engine.convertAsDouble(AMOUNT, "pond", "attonewton", PLACES), 0.0);
        assertEquals(2.8047019, engine.convertAsDouble(AMOUNT, "pond", "centinewton", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "pond", "decigram force", PLACES), 0.0);
        assertEquals(0.2804702, engine.convertAsDouble(AMOUNT, "pond", "decinewton", PLACES), 0.0);
        assertEquals(0.286, engine.convertAsDouble(AMOUNT, "pond", "dekagram force", PLACES), 0.0);
        assertEquals(0.0028047, engine.convertAsDouble(AMOUNT, "pond", "dekanewton", PLACES), 0.0);
        assertEquals(2804.7019, engine.convertAsDouble(AMOUNT, "pond", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pond", "exanewton", PLACES), 0.0);
        assertEquals(28047018999999.996, engine.convertAsDouble(AMOUNT, "pond", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pond", "giganewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "pond", "gram force", PLACES), 0.0);
        assertEquals(0.0002805, engine.convertAsDouble(AMOUNT, "pond", "hectonewton", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "pond", "joule/meter", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "pond", "kilogram force", PLACES), 0.0);
        assertEquals(2.8e-05, engine.convertAsDouble(AMOUNT, "pond", "kilonewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "pond", "kilopond", PLACES), 0.0);
        assertEquals(6.3e-06, engine.convertAsDouble(AMOUNT, "pond", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pond", "meganewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "pond", "megapond", PLACES), 0.0);
        assertEquals(28047.019, engine.convertAsDouble(AMOUNT, "pond", "micronewton", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "pond", "millinewton", PLACES), 0.0);
        assertEquals(28047019.0, engine.convertAsDouble(AMOUNT, "pond", "nanonewton", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "pond", "newton", PLACES), 0.0);
        assertEquals(0.1008835, engine.convertAsDouble(AMOUNT, "pond", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pond", "petanewton", PLACES), 0.0);
        assertEquals(28047019000.0, engine.convertAsDouble(AMOUNT, "pond", "piconewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "pond", "pond", PLACES), 0.0);
        assertEquals(0.0063052, engine.convertAsDouble(AMOUNT, "pond", "pound force", PLACES), 0.0);
        assertEquals(0.2028645, engine.convertAsDouble(AMOUNT, "pond", "poundal", PLACES), 0.0);
        assertEquals(2.8e-05, engine.convertAsDouble(AMOUNT, "pond", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pond", "teranewton", PLACES), 0.0);
        assertEquals(2.8e-06, engine.convertAsDouble(AMOUNT, "pond", "ton force (long)", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "pond", "ton force", PLACES), 0.0);
        assertEquals(3.2e-06, engine.convertAsDouble(AMOUNT, "pond", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8047019000000003E22, engine.convertAsDouble(AMOUNT, "pond", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pond", "yottanewton", PLACES), 0.0);
        assertEquals(2.8047019e+19, engine.convertAsDouble(AMOUNT, "pond", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pond", "zettanewton", PLACES), 0.0);
        assertEquals(1.2721913819645026E19, engine.convertAsDouble(AMOUNT, "pound force", "attonewton", PLACES), 0.0);
        assertEquals(1272.191382, engine.convertAsDouble(AMOUNT, "pound force", "centinewton", PLACES), 0.0);
        assertEquals(12972.741782, engine.convertAsDouble(AMOUNT, "pound force", "decigram force", PLACES), 0.0);
        assertEquals(127.2191382, engine.convertAsDouble(AMOUNT, "pound force", "decinewton", PLACES), 0.0);
        assertEquals(129.7274178, engine.convertAsDouble(AMOUNT, "pound force", "dekagram force", PLACES), 0.0);
        assertEquals(1.2721914, engine.convertAsDouble(AMOUNT, "pound force", "dekanewton", PLACES), 0.0);
        assertEquals(1272191.3819645, engine.convertAsDouble(AMOUNT, "pound force", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pound force", "exanewton", PLACES), 0.0);
        assertEquals(1.2721913819645028E16, engine.convertAsDouble(AMOUNT, "pound force", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pound force", "giganewton", PLACES), 0.0);
        assertEquals(1297.2741782, engine.convertAsDouble(AMOUNT, "pound force", "gram force", PLACES), 0.0);
        assertEquals(0.1272191, engine.convertAsDouble(AMOUNT, "pound force", "hectonewton", PLACES), 0.0);
        assertEquals(12.7219138, engine.convertAsDouble(AMOUNT, "pound force", "joule/meter", PLACES), 0.0);
        assertEquals(1.2972742, engine.convertAsDouble(AMOUNT, "pound force", "kilogram force", PLACES), 0.0);
        assertEquals(0.0127219, engine.convertAsDouble(AMOUNT, "pound force", "kilonewton", PLACES), 0.0);
        assertEquals(1.2972742, engine.convertAsDouble(AMOUNT, "pound force", "kilopond", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "pound force", "kip", PLACES), 0.0);
        assertEquals(1.27e-05, engine.convertAsDouble(AMOUNT, "pound force", "meganewton", PLACES), 0.0);
        assertEquals(0.0012973, engine.convertAsDouble(AMOUNT, "pound force", "megapond", PLACES), 0.0);
        assertEquals(1.2721913819645E7, engine.convertAsDouble(AMOUNT, "pound force", "micronewton", PLACES), 0.0);
        assertEquals(12721.9138196, engine.convertAsDouble(AMOUNT, "pound force", "millinewton", PLACES), 0.0);
        assertEquals(1.2721913819645027E10, engine.convertAsDouble(AMOUNT, "pound force", "nanonewton", PLACES), 0.0);
        assertEquals(12.7219138, engine.convertAsDouble(AMOUNT, "pound force", "newton", PLACES), 0.0);
        assertEquals(45.7600002, engine.convertAsDouble(AMOUNT, "pound force", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pound force", "petanewton", PLACES), 0.0);
        assertEquals(1.272191381964503E13, engine.convertAsDouble(AMOUNT, "pound force", "piconewton", PLACES), 0.0);
        assertEquals(1297.2741782, engine.convertAsDouble(AMOUNT, "pound force", "pond", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "pound force", "pound force", PLACES), 0.0);
        assertEquals(92.0177818, engine.convertAsDouble(AMOUNT, "pound force", "poundal", PLACES), 0.0);
        assertEquals(0.0127219, engine.convertAsDouble(AMOUNT, "pound force", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pound force", "teranewton", PLACES), 0.0);
        assertEquals(0.0012768, engine.convertAsDouble(AMOUNT, "pound force", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0012973, engine.convertAsDouble(AMOUNT, "pound force", "ton force", PLACES), 0.0);
        assertEquals(0.00143, engine.convertAsDouble(AMOUNT, "pound force", "ton force (short)", PLACES), 0.0);
        assertEquals(1.2721913819645028E25, engine.convertAsDouble(AMOUNT, "pound force", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pound force", "yottanewton", PLACES), 0.0);
        assertEquals(1.272191381964503E22, engine.convertAsDouble(AMOUNT, "pound force", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "pound force", "zettanewton", PLACES), 0.0);
        assertEquals(3.9540915699999994E17, engine.convertAsDouble(AMOUNT, "poundal", "attonewton", PLACES), 0.0);
        assertEquals(39.5409157, engine.convertAsDouble(AMOUNT, "poundal", "centinewton", PLACES), 0.0);
        assertEquals(403.2051282, engine.convertAsDouble(AMOUNT, "poundal", "decigram force", PLACES), 0.0);
        assertEquals(3.9540916, engine.convertAsDouble(AMOUNT, "poundal", "decinewton", PLACES), 0.0);
        assertEquals(4.0320513, engine.convertAsDouble(AMOUNT, "poundal", "dekagram force", PLACES), 0.0);
        assertEquals(0.0395409, engine.convertAsDouble(AMOUNT, "poundal", "dekanewton", PLACES), 0.0);
        assertEquals(39540.9157, engine.convertAsDouble(AMOUNT, "poundal", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "poundal", "exanewton", PLACES), 0.0);
        assertEquals(395409156999999.9, engine.convertAsDouble(AMOUNT, "poundal", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "poundal", "giganewton", PLACES), 0.0);
        assertEquals(40.3205128, engine.convertAsDouble(AMOUNT, "poundal", "gram force", PLACES), 0.0);
        assertEquals(0.0039541, engine.convertAsDouble(AMOUNT, "poundal", "hectonewton", PLACES), 0.0);
        assertEquals(0.3954092, engine.convertAsDouble(AMOUNT, "poundal", "joule/meter", PLACES), 0.0);
        assertEquals(0.0403205, engine.convertAsDouble(AMOUNT, "poundal", "kilogram force", PLACES), 0.0);
        assertEquals(0.0003954, engine.convertAsDouble(AMOUNT, "poundal", "kilonewton", PLACES), 0.0);
        assertEquals(0.0403205, engine.convertAsDouble(AMOUNT, "poundal", "kilopond", PLACES), 0.0);
        assertEquals(8.89e-05, engine.convertAsDouble(AMOUNT, "poundal", "kip", PLACES), 0.0);
        assertEquals(4e-07, engine.convertAsDouble(AMOUNT, "poundal", "meganewton", PLACES), 0.0);
        assertEquals(4.03e-05, engine.convertAsDouble(AMOUNT, "poundal", "megapond", PLACES), 0.0);
        assertEquals(395409.157, engine.convertAsDouble(AMOUNT, "poundal", "micronewton", PLACES), 0.0);
        assertEquals(395.409157, engine.convertAsDouble(AMOUNT, "poundal", "millinewton", PLACES), 0.0);
        assertEquals(395409156.9999999, engine.convertAsDouble(AMOUNT, "poundal", "nanonewton", PLACES), 0.0);
        assertEquals(0.3954092, engine.convertAsDouble(AMOUNT, "poundal", "newton", PLACES), 0.0);
        assertEquals(1.4222642, engine.convertAsDouble(AMOUNT, "poundal", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "poundal", "petanewton", PLACES), 0.0);
        assertEquals(395409156999.99994, engine.convertAsDouble(AMOUNT, "poundal", "piconewton", PLACES), 0.0);
        assertEquals(40.3205128, engine.convertAsDouble(AMOUNT, "poundal", "pond", PLACES), 0.0);
        assertEquals(0.0888915, engine.convertAsDouble(AMOUNT, "poundal", "pound force", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "poundal", "poundal", PLACES), 0.0);
        assertEquals(0.0003954, engine.convertAsDouble(AMOUNT, "poundal", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "poundal", "teranewton", PLACES), 0.0);
        assertEquals(3.97e-05, engine.convertAsDouble(AMOUNT, "poundal", "ton force (long)", PLACES), 0.0);
        assertEquals(4.03e-05, engine.convertAsDouble(AMOUNT, "poundal", "ton force", PLACES), 0.0);
        assertEquals(4.44e-05, engine.convertAsDouble(AMOUNT, "poundal", "ton force (short)", PLACES), 0.0);
        assertEquals(3.95409157e+23, engine.convertAsDouble(AMOUNT, "poundal", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "poundal", "yottanewton", PLACES), 0.0);
        assertEquals(3.95409157e+20, engine.convertAsDouble(AMOUNT, "poundal", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "poundal", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E21, engine.convertAsDouble(AMOUNT, "sthene", "attonewton", PLACES), 0.0);
        assertEquals(286000.0, engine.convertAsDouble(AMOUNT, "sthene", "centinewton", PLACES), 0.0);
        assertEquals(2916388.3691169, engine.convertAsDouble(AMOUNT, "sthene", "decigram force", PLACES), 0.0);
        assertEquals(28600.0, engine.convertAsDouble(AMOUNT, "sthene", "decinewton", PLACES), 0.0);
        assertEquals(29163.8836912, engine.convertAsDouble(AMOUNT, "sthene", "dekagram force", PLACES), 0.0);
        assertEquals(286.0, engine.convertAsDouble(AMOUNT, "sthene", "dekanewton", PLACES), 0.0);
        assertEquals(2.86E8, engine.convertAsDouble(AMOUNT, "sthene", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "sthene", "exanewton", PLACES), 0.0);
        assertEquals(2.86E18, engine.convertAsDouble(AMOUNT, "sthene", "femtonewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "sthene", "giganewton", PLACES), 0.0);
        assertEquals(291638.8369117, engine.convertAsDouble(AMOUNT, "sthene", "gram force", PLACES), 0.0);
        assertEquals(28.6, engine.convertAsDouble(AMOUNT, "sthene", "hectonewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "sthene", "joule/meter", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "sthene", "kilogram force", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "sthene", "kilonewton", PLACES), 0.0);
        assertEquals(291.6388369, engine.convertAsDouble(AMOUNT, "sthene", "kilopond", PLACES), 0.0);
        assertEquals(0.6429536, engine.convertAsDouble(AMOUNT, "sthene", "kip", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "sthene", "meganewton", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "sthene", "megapond", PLACES), 0.0);
        assertEquals(2860000000.0, engine.convertAsDouble(AMOUNT, "sthene", "micronewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "sthene", "millinewton", PLACES), 0.0);
        assertEquals(2.86E12, engine.convertAsDouble(AMOUNT, "sthene", "nanonewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "sthene", "newton", PLACES), 0.0);
        assertEquals(10287.2572715, engine.convertAsDouble(AMOUNT, "sthene", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "sthene", "petanewton", PLACES), 0.0);
        assertEquals(2860000000000000.0, engine.convertAsDouble(AMOUNT, "sthene", "piconewton", PLACES), 0.0);
        assertEquals(291638.8369117, engine.convertAsDouble(AMOUNT, "sthene", "pond", PLACES), 0.0);
        assertEquals(642.9535773, engine.convertAsDouble(AMOUNT, "sthene", "pound force", PLACES), 0.0);
        assertEquals(20686.4202692, engine.convertAsDouble(AMOUNT, "sthene", "poundal", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "sthene", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "sthene", "teranewton", PLACES), 0.0);
        assertEquals(0.2870328, engine.convertAsDouble(AMOUNT, "sthene", "ton force (long)", PLACES), 0.0);
        assertEquals(0.2916388, engine.convertAsDouble(AMOUNT, "sthene", "ton force", PLACES), 0.0);
        assertEquals(0.3214768, engine.convertAsDouble(AMOUNT, "sthene", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86E27, engine.convertAsDouble(AMOUNT, "sthene", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "sthene", "yottanewton", PLACES), 0.0);
        assertEquals(2.8600000000000005E24, engine.convertAsDouble(AMOUNT, "sthene", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "sthene", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E30, engine.convertAsDouble(AMOUNT, "teranewton", "attonewton", PLACES), 0.0);
        assertEquals(286000000000000.0, engine.convertAsDouble(AMOUNT, "teranewton", "centinewton", PLACES), 0.0);
        assertEquals(2.916388369116875E15, engine.convertAsDouble(AMOUNT, "teranewton", "decigram force", PLACES), 0.0);
        assertEquals(2.86E13, engine.convertAsDouble(AMOUNT, "teranewton", "decinewton", PLACES), 0.0);
        assertEquals(29163883691168.746, engine.convertAsDouble(AMOUNT, "teranewton", "dekagram force", PLACES), 0.0);
        assertEquals(286000000000.0, engine.convertAsDouble(AMOUNT, "teranewton", "dekanewton", PLACES), 0.0);
        assertEquals(2.85999999999999968E17, engine.convertAsDouble(AMOUNT, "teranewton", "dyne", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "teranewton", "exanewton", PLACES), 0.0);
        assertEquals(2.8599999999999997e+27, engine.convertAsDouble(AMOUNT, "teranewton", "femtonewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "teranewton", "giganewton", PLACES), 0.0);
        assertEquals(2.916388369116875E14, engine.convertAsDouble(AMOUNT, "teranewton", "gram force", PLACES), 0.0);
        assertEquals(28600000000.0, engine.convertAsDouble(AMOUNT, "teranewton", "hectonewton", PLACES), 0.0);
        assertEquals(2860000000000.0, engine.convertAsDouble(AMOUNT, "teranewton", "joule/meter", PLACES), 0.0);
        assertEquals(2.916388369116875E11, engine.convertAsDouble(AMOUNT, "teranewton", "kilogram force", PLACES), 0.0);
        assertEquals(2.86E9, engine.convertAsDouble(AMOUNT, "teranewton", "kilonewton", PLACES), 0.0);
        assertEquals(2.916388369116875E11, engine.convertAsDouble(AMOUNT, "teranewton", "kilopond", PLACES), 0.0);
        assertEquals(6.42953577265172E8, engine.convertAsDouble(AMOUNT, "teranewton", "kip", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "teranewton", "meganewton", PLACES), 0.0);
        assertEquals(2.916388369116875E8, engine.convertAsDouble(AMOUNT, "teranewton", "megapond", PLACES), 0.0);
        assertEquals(2.86e+18, engine.convertAsDouble(AMOUNT, "teranewton", "micronewton", PLACES), 0.0);
        assertEquals(2860000000000000.0, engine.convertAsDouble(AMOUNT, "teranewton", "millinewton", PLACES), 0.0);
        assertEquals(2.86E21, engine.convertAsDouble(AMOUNT, "teranewton", "nanonewton", PLACES), 0.0);
        assertEquals(2860000000000.0, engine.convertAsDouble(AMOUNT, "teranewton", "newton", PLACES), 0.0);
        assertEquals(10287257271535.213, engine.convertAsDouble(AMOUNT, "teranewton", "ounce force", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "teranewton", "petanewton", PLACES), 0.0);
        assertEquals(2.86e+24, engine.convertAsDouble(AMOUNT, "teranewton", "piconewton", PLACES), 0.0);
        assertEquals(2.916388369116875E14, engine.convertAsDouble(AMOUNT, "teranewton", "pond", PLACES), 0.0);
        assertEquals(6.42953577265172E11, engine.convertAsDouble(AMOUNT, "teranewton", "pound force", PLACES), 0.0);
        assertEquals(20686420269220.02, engine.convertAsDouble(AMOUNT, "teranewton", "poundal", PLACES), 0.0);
        assertEquals(2.86E9, engine.convertAsDouble(AMOUNT, "teranewton", "sthene", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "teranewton", "teranewton", PLACES), 0.0);
        assertEquals(287032847.978103, engine.convertAsDouble(AMOUNT, "teranewton", "ton force (long)", PLACES), 0.0);
        assertEquals(2.916388369116875E8, engine.convertAsDouble(AMOUNT, "teranewton", "ton force", PLACES), 0.0);
        assertEquals(3.214767897354754E8, engine.convertAsDouble(AMOUNT, "teranewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86e+36, engine.convertAsDouble(AMOUNT, "teranewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "teranewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.8600000000000004E33, engine.convertAsDouble(AMOUNT, "teranewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "teranewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.8497086858239997e+22, engine.convertAsDouble(AMOUNT, "ton force (long)", "attonewton", PLACES), 0.0);
        assertEquals(2849708.685824, engine.convertAsDouble(AMOUNT, "ton force (long)", "centinewton", PLACES), 0.0);
        assertEquals(29058941.4919876, engine.convertAsDouble(AMOUNT, "ton force (long)", "decigram force", PLACES), 0.0);
        assertEquals(284970.8685824, engine.convertAsDouble(AMOUNT, "ton force (long)", "decinewton", PLACES), 0.0);
        assertEquals(290589.4149199, engine.convertAsDouble(AMOUNT, "ton force (long)", "dekagram force", PLACES), 0.0);
        assertEquals(2849.7086858, engine.convertAsDouble(AMOUNT, "ton force (long)", "dekanewton", PLACES), 0.0);
        assertEquals(2.849708685824E9, engine.convertAsDouble(AMOUNT, "ton force (long)", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force (long)", "exanewton", PLACES), 0.0);
        assertEquals(2.8497086858239996e+19, engine.convertAsDouble(AMOUNT, "ton force (long)", "femtonewton", PLACES), 0.0);
        assertEquals(2.85e-05, engine.convertAsDouble(AMOUNT, "ton force (long)", "giganewton", PLACES), 0.0);
        assertEquals(2905894.1491988, engine.convertAsDouble(AMOUNT, "ton force (long)", "gram force", PLACES), 0.0);
        assertEquals(284.9708686, engine.convertAsDouble(AMOUNT, "ton force (long)", "hectonewton", PLACES), 0.0);
        assertEquals(28497.0868582, engine.convertAsDouble(AMOUNT, "ton force (long)", "joule/meter", PLACES), 0.0);
        assertEquals(2905.8941492, engine.convertAsDouble(AMOUNT, "ton force (long)", "kilogram force", PLACES), 0.0);
        assertEquals(28.4970869, engine.convertAsDouble(AMOUNT, "ton force (long)", "kilonewton", PLACES), 0.0);
        assertEquals(2905.8941492, engine.convertAsDouble(AMOUNT, "ton force (long)", "kilopond", PLACES), 0.0);
        assertEquals(6.4064, engine.convertAsDouble(AMOUNT, "ton force (long)", "kip", PLACES), 0.0);
        assertEquals(0.0284971, engine.convertAsDouble(AMOUNT, "ton force (long)", "meganewton", PLACES), 0.0);
        assertEquals(2.9058941, engine.convertAsDouble(AMOUNT, "ton force (long)", "megapond", PLACES), 0.0);
        assertEquals(28497086858.24, engine.convertAsDouble(AMOUNT, "ton force (long)", "micronewton", PLACES), 0.0);
        assertEquals(28497086.85824, engine.convertAsDouble(AMOUNT, "ton force (long)", "millinewton", PLACES), 0.0);
        assertEquals(2.849708685824E13, engine.convertAsDouble(AMOUNT, "ton force (long)", "nanonewton", PLACES), 0.0);
        assertEquals(28497.0868582, engine.convertAsDouble(AMOUNT, "ton force (long)", "newton", PLACES), 0.0);
        assertEquals(102502.4, engine.convertAsDouble(AMOUNT, "ton force (long)", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force (long)", "petanewton", PLACES), 0.0);
        assertEquals(2.849708685824e+16, engine.convertAsDouble(AMOUNT, "ton force (long)", "piconewton", PLACES), 0.0);
        assertEquals(2905894.1491988, engine.convertAsDouble(AMOUNT, "ton force (long)", "pond", PLACES), 0.0);
        assertEquals(6406.399978, engine.convertAsDouble(AMOUNT, "ton force (long)", "pound force", PLACES), 0.0);
        assertEquals(206119.8304888, engine.convertAsDouble(AMOUNT, "ton force (long)", "poundal", PLACES), 0.0);
        assertEquals(28.4970869, engine.convertAsDouble(AMOUNT, "ton force (long)", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force (long)", "teranewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "ton force (long)", "ton force (long)", PLACES), 0.0);
        assertEquals(2.9058941, engine.convertAsDouble(AMOUNT, "ton force (long)", "ton force", PLACES), 0.0);
        assertEquals(3.2032, engine.convertAsDouble(AMOUNT, "ton force (long)", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8497086858240003e+28, engine.convertAsDouble(AMOUNT, "ton force (long)", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force (long)", "yottanewton", PLACES), 0.0);
        assertEquals(2.849708685824e+25, engine.convertAsDouble(AMOUNT, "ton force (long)", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force (long)", "zettanewton", PLACES), 0.0);
        assertEquals(2.8047018999999994e+22, engine.convertAsDouble(AMOUNT, "ton force", "attonewton", PLACES), 0.0);
        assertEquals(2804701.9, engine.convertAsDouble(AMOUNT, "ton force", "centinewton", PLACES), 0.0);
        assertEquals(28600000.0, engine.convertAsDouble(AMOUNT, "ton force", "decigram force", PLACES), 0.0);
        assertEquals(280470.19, engine.convertAsDouble(AMOUNT, "ton force", "decinewton", PLACES), 0.0);
        assertEquals(286000.0, engine.convertAsDouble(AMOUNT, "ton force", "dekagram force", PLACES), 0.0);
        assertEquals(2804.7019, engine.convertAsDouble(AMOUNT, "ton force", "dekanewton", PLACES), 0.0);
        assertEquals(2804701899.9999995, engine.convertAsDouble(AMOUNT, "ton force", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force", "exanewton", PLACES), 0.0);
        assertEquals(2.8047018999999996e+19, engine.convertAsDouble(AMOUNT, "ton force", "femtonewton", PLACES), 0.0);
        assertEquals(2.8e-05, engine.convertAsDouble(AMOUNT, "ton force", "giganewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "ton force", "gram force", PLACES), 0.0);
        assertEquals(280.47019, engine.convertAsDouble(AMOUNT, "ton force", "hectonewton", PLACES), 0.0);
        assertEquals(28047.019, engine.convertAsDouble(AMOUNT, "ton force", "joule/meter", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "ton force", "kilogram force", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "ton force", "kilonewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "ton force", "kilopond", PLACES), 0.0);
        assertEquals(6.3052207, engine.convertAsDouble(AMOUNT, "ton force", "kip", PLACES), 0.0);
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "ton force", "meganewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "ton force", "megapond", PLACES), 0.0);
        assertEquals(2.8047018999999996E10, engine.convertAsDouble(AMOUNT, "ton force", "micronewton", PLACES), 0.0);
        assertEquals(28047019.0, engine.convertAsDouble(AMOUNT, "ton force", "millinewton", PLACES), 0.0);
        assertEquals(28047018999999.996, engine.convertAsDouble(AMOUNT, "ton force", "nanonewton", PLACES), 0.0);
        assertEquals(28047.019, engine.convertAsDouble(AMOUNT, "ton force", "newton", PLACES), 0.0);
        assertEquals(100883.5315219, engine.convertAsDouble(AMOUNT, "ton force", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force", "petanewton", PLACES), 0.0);
        assertEquals(2.8047018999999996E16, engine.convertAsDouble(AMOUNT, "ton force", "piconewton", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "ton force", "pond", PLACES), 0.0);
        assertEquals(6305.2206985, engine.convertAsDouble(AMOUNT, "ton force", "pound force", PLACES), 0.0);
        assertEquals(202864.4833331, engine.convertAsDouble(AMOUNT, "ton force", "poundal", PLACES), 0.0);
        assertEquals(28.047019, engine.convertAsDouble(AMOUNT, "ton force", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force", "teranewton", PLACES), 0.0);
        assertEquals(2.8148307, engine.convertAsDouble(AMOUNT, "ton force", "ton force (long)", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "ton force", "ton force", PLACES), 0.0);
        assertEquals(3.1526104, engine.convertAsDouble(AMOUNT, "ton force", "ton force (short)", PLACES), 0.0);
        assertEquals(2.8047019e+28, engine.convertAsDouble(AMOUNT, "ton force", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force", "yottanewton", PLACES), 0.0);
        assertEquals(2.8047019e+25, engine.convertAsDouble(AMOUNT, "ton force", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force", "zettanewton", PLACES), 0.0);
        assertEquals(2.5443827552E22, engine.convertAsDouble(AMOUNT, "ton force (short)", "attonewton", PLACES), 0.0);
        assertEquals(2544382.7552, engine.convertAsDouble(AMOUNT, "ton force (short)", "centinewton", PLACES), 0.0);
        assertEquals(2.59454834749889E7, engine.convertAsDouble(AMOUNT, "ton force (short)", "decigram force", PLACES), 0.0);
        assertEquals(254438.27552, engine.convertAsDouble(AMOUNT, "ton force (short)", "decinewton", PLACES), 0.0);
        assertEquals(259454.8347499, engine.convertAsDouble(AMOUNT, "ton force (short)", "dekagram force", PLACES), 0.0);
        assertEquals(2544.3827552, engine.convertAsDouble(AMOUNT, "ton force (short)", "dekanewton", PLACES), 0.0);
        assertEquals(2.5443827552E9, engine.convertAsDouble(AMOUNT, "ton force (short)", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force (short)", "exanewton", PLACES), 0.0);
        assertEquals(2.5443827551999996E19, engine.convertAsDouble(AMOUNT, "ton force (short)", "femtonewton", PLACES), 0.0);
        assertEquals(2.54e-05, engine.convertAsDouble(AMOUNT, "ton force (short)", "giganewton", PLACES), 0.0);
        assertEquals(2594548.3474989, engine.convertAsDouble(AMOUNT, "ton force (short)", "gram force", PLACES), 0.0);
        assertEquals(254.4382755, engine.convertAsDouble(AMOUNT, "ton force (short)", "hectonewton", PLACES), 0.0);
        assertEquals(25443.827552, engine.convertAsDouble(AMOUNT, "ton force (short)", "joule/meter", PLACES), 0.0);
        assertEquals(2594.5483475, engine.convertAsDouble(AMOUNT, "ton force (short)", "kilogram force", PLACES), 0.0);
        assertEquals(25.4438276, engine.convertAsDouble(AMOUNT, "ton force (short)", "kilonewton", PLACES), 0.0);
        assertEquals(2594.5483475, engine.convertAsDouble(AMOUNT, "ton force (short)", "kilopond", PLACES), 0.0);
        assertEquals(5.72, engine.convertAsDouble(AMOUNT, "ton force (short)", "kip", PLACES), 0.0);
        assertEquals(0.0254438, engine.convertAsDouble(AMOUNT, "ton force (short)", "meganewton", PLACES), 0.0);
        assertEquals(2.5945483, engine.convertAsDouble(AMOUNT, "ton force (short)", "megapond", PLACES), 0.0);
        assertEquals(25443827552.0, engine.convertAsDouble(AMOUNT, "ton force (short)", "micronewton", PLACES), 0.0);
        assertEquals(25443827.552, engine.convertAsDouble(AMOUNT, "ton force (short)", "millinewton", PLACES), 0.0);
        assertEquals(25443827551999.996, engine.convertAsDouble(AMOUNT, "ton force (short)", "nanonewton", PLACES), 0.0);
        assertEquals(25443.827552, engine.convertAsDouble(AMOUNT, "ton force (short)", "newton", PLACES), 0.0);
        assertEquals(91520.0, engine.convertAsDouble(AMOUNT, "ton force (short)", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force (short)", "petanewton", PLACES), 0.0);
        assertEquals(2.5443827552e+16, engine.convertAsDouble(AMOUNT, "ton force (short)", "piconewton", PLACES), 0.0);
        assertEquals(2594548.3474989, engine.convertAsDouble(AMOUNT, "ton force (short)", "pond", PLACES), 0.0);
        assertEquals(5719.9999804, engine.convertAsDouble(AMOUNT, "ton force (short)", "pound force", PLACES), 0.0);
        assertEquals(184035.5629364, engine.convertAsDouble(AMOUNT, "ton force (short)", "poundal", PLACES), 0.0);
        assertEquals(25.4438276, engine.convertAsDouble(AMOUNT, "ton force (short)", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force (short)", "teranewton", PLACES), 0.0);
        assertEquals(2.5535714, engine.convertAsDouble(AMOUNT, "ton force (short)", "ton force (long)", PLACES), 0.0);
        assertEquals(2.5945483, engine.convertAsDouble(AMOUNT, "ton force (short)", "ton force", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "ton force (short)", "ton force (short)", PLACES), 0.0);
        assertEquals(2.5443827552E28, engine.convertAsDouble(AMOUNT, "ton force (short)", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force (short)", "yottanewton", PLACES), 0.0);
        assertEquals(2.5443827552e+25, engine.convertAsDouble(AMOUNT, "ton force (short)", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "ton force (short)", "zettanewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "yoctonewton", "attonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "centinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "decigram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "decinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "dekagram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "dekanewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "exanewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "giganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "gram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "hectonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "joule/meter", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "kilogram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "kilonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "kilopond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "meganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "megapond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "micronewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "millinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "nanonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "newton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "petanewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "piconewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "pond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "pound force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "poundal", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "teranewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "ton force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "yoctonewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "yottanewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "yoctonewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "yoctonewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E42, engine.convertAsDouble(AMOUNT, "yottanewton", "attonewton", PLACES), 0.0);
        assertEquals(2.86e+26, engine.convertAsDouble(AMOUNT, "yottanewton", "centinewton", PLACES), 0.0);
        assertEquals(2.9163883691168747E27, engine.convertAsDouble(AMOUNT, "yottanewton", "decigram force", PLACES), 0.0);
        assertEquals(2.8599999999999994E25, engine.convertAsDouble(AMOUNT, "yottanewton", "decinewton", PLACES), 0.0);
        assertEquals(2.9163883691168744e+25, engine.convertAsDouble(AMOUNT, "yottanewton", "dekagram force", PLACES), 0.0);
        assertEquals(2.86e+23, engine.convertAsDouble(AMOUNT, "yottanewton", "dekanewton", PLACES), 0.0);
        assertEquals(2.8599999999999996E29, engine.convertAsDouble(AMOUNT, "yottanewton", "dyne", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "yottanewton", "exanewton", PLACES), 0.0);
        assertEquals(2.86E39, engine.convertAsDouble(AMOUNT, "yottanewton", "femtonewton", PLACES), 0.0);
        assertEquals(2860000000000000.0, engine.convertAsDouble(AMOUNT, "yottanewton", "giganewton", PLACES), 0.0);
        assertEquals(2.9163883691168746e+26, engine.convertAsDouble(AMOUNT, "yottanewton", "gram force", PLACES), 0.0);
        assertEquals(2.8599999999999998e+22, engine.convertAsDouble(AMOUNT, "yottanewton", "hectonewton", PLACES), 0.0);
        assertEquals(2.86e+24, engine.convertAsDouble(AMOUNT, "yottanewton", "joule/meter", PLACES), 0.0);
        assertEquals(2.9163883691168745e+23, engine.convertAsDouble(AMOUNT, "yottanewton", "kilogram force", PLACES), 0.0);
        assertEquals(2.86E21, engine.convertAsDouble(AMOUNT, "yottanewton", "kilonewton", PLACES), 0.0);
        assertEquals(2.9163883691168745e+23, engine.convertAsDouble(AMOUNT, "yottanewton", "kilopond", PLACES), 0.0);
        assertEquals(6.429535772651719E20, engine.convertAsDouble(AMOUNT, "yottanewton", "kip", PLACES), 0.0);
        assertEquals(2.86E18, engine.convertAsDouble(AMOUNT, "yottanewton", "meganewton", PLACES), 0.0);
        assertEquals(2.9163883691168747E20, engine.convertAsDouble(AMOUNT, "yottanewton", "megapond", PLACES), 0.0);
        assertEquals(2.86e+30, engine.convertAsDouble(AMOUNT, "yottanewton", "micronewton", PLACES), 0.0);
        assertEquals(2.8599999999999997e+27, engine.convertAsDouble(AMOUNT, "yottanewton", "millinewton", PLACES), 0.0);
        assertEquals(2.86E33, engine.convertAsDouble(AMOUNT, "yottanewton", "nanonewton", PLACES), 0.0);
        assertEquals(2.86e+24, engine.convertAsDouble(AMOUNT, "yottanewton", "newton", PLACES), 0.0);
        assertEquals(1.0287257271535214E25, engine.convertAsDouble(AMOUNT, "yottanewton", "ounce force", PLACES), 0.0);
        assertEquals(2860000000.0, engine.convertAsDouble(AMOUNT, "yottanewton", "petanewton", PLACES), 0.0);
        assertEquals(2.86e+36, engine.convertAsDouble(AMOUNT, "yottanewton", "piconewton", PLACES), 0.0);
        assertEquals(2.9163883691168746e+26, engine.convertAsDouble(AMOUNT, "yottanewton", "pond", PLACES), 0.0);
        assertEquals(6.42953577265172E23, engine.convertAsDouble(AMOUNT, "yottanewton", "pound force", PLACES), 0.0);
        assertEquals(2.068642026922002e+25, engine.convertAsDouble(AMOUNT, "yottanewton", "poundal", PLACES), 0.0);
        assertEquals(2.86E21, engine.convertAsDouble(AMOUNT, "yottanewton", "sthene", PLACES), 0.0);
        assertEquals(2860000000000.0, engine.convertAsDouble(AMOUNT, "yottanewton", "teranewton", PLACES), 0.0);
        assertEquals(2.87032847978103E20, engine.convertAsDouble(AMOUNT, "yottanewton", "ton force (long)", PLACES), 0.0);
        assertEquals(2.9163883691168747E20, engine.convertAsDouble(AMOUNT, "yottanewton", "ton force", PLACES), 0.0);
        assertEquals(3.214767897354754E20, engine.convertAsDouble(AMOUNT, "yottanewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86e+48, engine.convertAsDouble(AMOUNT, "yottanewton", "yoctonewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "yottanewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.86E45, engine.convertAsDouble(AMOUNT, "yottanewton", "zeptonewton", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "yottanewton", "zettanewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "zeptonewton", "attonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "centinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "decigram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "decinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "dekagram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "dekanewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "dyne", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "exanewton", PLACES), 0.0);
        assertEquals(2.9e-06, engine.convertAsDouble(AMOUNT, "zeptonewton", "femtonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "giganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "gram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "hectonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "joule/meter", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "kilogram force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "kilonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "kilopond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "kip", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "meganewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "megapond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "micronewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "millinewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "nanonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "newton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "ounce force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "petanewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "piconewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "pond", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "pound force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "poundal", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "sthene", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "teranewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "ton force (long)", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "ton force", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "zeptonewton", "zeptonewton", PLACES), 0.0);
        assertEquals(0.0, engine.convertAsDouble(AMOUNT, "zeptonewton", "zettanewton", PLACES), 0.0);
        assertEquals(2.86E39, engine.convertAsDouble(AMOUNT, "zettanewton", "attonewton", PLACES), 0.0);
        assertEquals(2.86e+23, engine.convertAsDouble(AMOUNT, "zettanewton", "centinewton", PLACES), 0.0);
        assertEquals(2.916388369116875E24, engine.convertAsDouble(AMOUNT, "zettanewton", "decigram force", PLACES), 0.0);
        assertEquals(2.8599999999999998e+22, engine.convertAsDouble(AMOUNT, "zettanewton", "decinewton", PLACES), 0.0);
        assertEquals(2.916388369116875E22, engine.convertAsDouble(AMOUNT, "zettanewton", "dekagram force", PLACES), 0.0);
        assertEquals(2.86E20, engine.convertAsDouble(AMOUNT, "zettanewton", "dekanewton", PLACES), 0.0);
        assertEquals(2.86E26, engine.convertAsDouble(AMOUNT, "zettanewton", "dyne", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "zettanewton", "exanewton", PLACES), 0.0);
        assertEquals(2.86E36, engine.convertAsDouble(AMOUNT, "zettanewton", "femtonewton", PLACES), 0.0);
        assertEquals(2860000000000.0, engine.convertAsDouble(AMOUNT, "zettanewton", "giganewton", PLACES), 0.0);
        assertEquals(2.916388369116875E23, engine.convertAsDouble(AMOUNT, "zettanewton", "gram force", PLACES), 0.0);
        assertEquals(2.86e+19, engine.convertAsDouble(AMOUNT, "zettanewton", "hectonewton", PLACES), 0.0);
        assertEquals(2.86e+21, engine.convertAsDouble(AMOUNT, "zettanewton", "joule/meter", PLACES), 0.0);
        assertEquals(2.916388369116875E20, engine.convertAsDouble(AMOUNT, "zettanewton", "kilogram force", PLACES), 0.0);
        assertEquals(2.86E18, engine.convertAsDouble(AMOUNT, "zettanewton", "kilonewton", PLACES), 0.0);
        assertEquals(2.916388369116875E20, engine.convertAsDouble(AMOUNT, "zettanewton", "kilopond", PLACES), 0.0);
        assertEquals(6.4295357726517197E17, engine.convertAsDouble(AMOUNT, "zettanewton", "kip", PLACES), 0.0);
        assertEquals(2.86E15, engine.convertAsDouble(AMOUNT, "zettanewton", "meganewton", PLACES), 0.0);
        assertEquals(2.9163883691168749E17, engine.convertAsDouble(AMOUNT, "zettanewton", "megapond", PLACES), 0.0);
        assertEquals(2.86e+27, engine.convertAsDouble(AMOUNT, "zettanewton", "micronewton", PLACES), 0.0);
        assertEquals(2.86e+24, engine.convertAsDouble(AMOUNT, "zettanewton", "millinewton", PLACES), 0.0);
        assertEquals(2.86E30, engine.convertAsDouble(AMOUNT, "zettanewton", "nanonewton", PLACES), 0.0);
        assertEquals(2.86e+21, engine.convertAsDouble(AMOUNT, "zettanewton", "newton", PLACES), 0.0);
        assertEquals(1.0287257271535212e+22, engine.convertAsDouble(AMOUNT, "zettanewton", "ounce force", PLACES), 0.0);
        assertEquals(2860000.0, engine.convertAsDouble(AMOUNT, "zettanewton", "petanewton", PLACES), 0.0);
        assertEquals(2.86e+33, engine.convertAsDouble(AMOUNT, "zettanewton", "piconewton", PLACES), 0.0);
        assertEquals(2.916388369116875E23, engine.convertAsDouble(AMOUNT, "zettanewton", "pond", PLACES), 0.0);
        assertEquals(6.42953577265172E20, engine.convertAsDouble(AMOUNT, "zettanewton", "pound force", PLACES), 0.0);
        assertEquals(2.068642026922002e+22, engine.convertAsDouble(AMOUNT, "zettanewton", "poundal", PLACES), 0.0);
        assertEquals(2.86E18, engine.convertAsDouble(AMOUNT, "zettanewton", "sthene", PLACES), 0.0);
        assertEquals(2860000000.0, engine.convertAsDouble(AMOUNT, "zettanewton", "teranewton", PLACES), 0.0);
        assertEquals(2.8703284797810304E17, engine.convertAsDouble(AMOUNT, "zettanewton", "ton force (long)", PLACES), 0.0);
        assertEquals(2.9163883691168749E17, engine.convertAsDouble(AMOUNT, "zettanewton", "ton force", PLACES), 0.0);
        assertEquals(3.2147678973547539E17, engine.convertAsDouble(AMOUNT, "zettanewton", "ton force (short)", PLACES), 0.0);
        assertEquals(2.86E45, engine.convertAsDouble(AMOUNT, "zettanewton", "yoctonewton", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "zettanewton", "yottanewton", PLACES), 0.0);
        assertEquals(2.86e+42, engine.convertAsDouble(AMOUNT, "zettanewton", "zeptonewton", PLACES), 0.0);
        assertEquals(2.86, engine.convertAsDouble(AMOUNT, "zettanewton", "zettanewton", PLACES), 0.0);
    }

    @Test
    public void testAliases() {
        assertEquals(0.028047, engine.convertAsDouble(AMOUNT, "kgf", "kn", PLACES), 0.0);
        assertEquals(0.0286, engine.convertAsDouble(AMOUNT, "cn", "ns", PLACES), 0.0);
        assertEquals(0.00286, engine.convertAsDouble(AMOUNT, "mgn", "gn", PLACES), 0.0);
        assertEquals(2860.0, engine.convertAsDouble(AMOUNT, "n", "mn", PLACES), 0.0);
    }

    @Test
    public void testUnitGroup() {
        Conversion conversion = engine.convert(AMOUNT, "ton force", "newtons");
        assertEquals("force", conversion.getUnitGroup().getName());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testInvalidConversion() {
        engine.convertAsDouble(AMOUNT, "newtons", "cm");
    }
}